// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: api/proto/license.proto

package license

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Status int32

const (
	Status_notFound      Status = 0
	Status_expired       Status = 1
	Status_aboutToExpire Status = 2
	Status_valid         Status = 3
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "notFound",
		1: "expired",
		2: "aboutToExpire",
		3: "valid",
	}
	Status_value = map[string]int32{
		"notFound":      0,
		"expired":       1,
		"aboutToExpire": 2,
		"valid":         3,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_license_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_api_proto_license_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_license_proto_rawDescGZIP(), []int{0}
}

type LicenseType int32

const (
	LicenseType_trial LicenseType = 0
	LicenseType_pro   LicenseType = 1
	LicenseType_ami   LicenseType = 2
)

// Enum value maps for LicenseType.
var (
	LicenseType_name = map[int32]string{
		0: "trial",
		1: "pro",
		2: "ami",
	}
	LicenseType_value = map[string]int32{
		"trial": 0,
		"pro":   1,
		"ami":   2,
	}
)

func (x LicenseType) Enum() *LicenseType {
	p := new(LicenseType)
	*p = x
	return p
}

func (x LicenseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_license_proto_enumTypes[1].Descriptor()
}

func (LicenseType) Type() protoreflect.EnumType {
	return &file_api_proto_license_proto_enumTypes[1]
}

func (x LicenseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseType.Descriptor instead.
func (LicenseType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_license_proto_rawDescGZIP(), []int{1}
}

type LicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LicenseRequest) Reset() {
	*x = LicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_license_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseRequest) ProtoMessage() {}

func (x *LicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_license_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseRequest.ProtoReflect.Descriptor instead.
func (*LicenseRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_license_proto_rawDescGZIP(), []int{0}
}

type LicenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     Status      `protobuf:"varint,1,opt,name=Status,proto3,enum=license.Status" json:"Status,omitempty"`
	ExpiryDate int64       `protobuf:"varint,2,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
	Message    string      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                     //message to the user
	Type       LicenseType `protobuf:"varint,4,opt,name=type,proto3,enum=license.LicenseType" json:"type,omitempty"` // map<string,string> features = 5;
}

func (x *LicenseResponse) Reset() {
	*x = LicenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_license_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseResponse) ProtoMessage() {}

func (x *LicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_license_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseResponse.ProtoReflect.Descriptor instead.
func (*LicenseResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_license_proto_rawDescGZIP(), []int{1}
}

func (x *LicenseResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_notFound
}

func (x *LicenseResponse) GetExpiryDate() int64 {
	if x != nil {
		return x.ExpiryDate
	}
	return 0
}

func (x *LicenseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LicenseResponse) GetType() LicenseType {
	if x != nil {
		return x.Type
	}
	return LicenseType_trial
}

type LicensePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseData string `protobuf:"bytes,1,opt,name=licenseData,proto3" json:"licenseData,omitempty"`
}

func (x *LicensePayload) Reset() {
	*x = LicensePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_license_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicensePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicensePayload) ProtoMessage() {}

func (x *LicensePayload) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_license_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicensePayload.ProtoReflect.Descriptor instead.
func (*LicensePayload) Descriptor() ([]byte, []int) {
	return file_api_proto_license_proto_rawDescGZIP(), []int{2}
}

func (x *LicensePayload) GetLicenseData() string {
	if x != nil {
		return x.LicenseData
	}
	return ""
}

var File_api_proto_license_proto protoreflect.FileDescriptor

var file_api_proto_license_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x10,
	0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x32, 0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2a, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x54, 0x6f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x03, 0x2a, 0x2a, 0x0a, 0x0b, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x72, 0x6f, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x61, 0x6d, 0x69, 0x10, 0x02, 0x32, 0xf7, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x92, 0x41,
	0x16, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0x0b, 0x47, 0x65, 0x74, 0x20,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0x18, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x19, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a,
	0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x42,
	0xd9, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x71, 0x61, 0x69, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x71, 0x63, 0x74, 0x6c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x3b, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x92, 0x41, 0xa1, 0x01, 0x12, 0x0e, 0x0a, 0x07, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x52, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x17, 0x0a,
	0x03, 0x34, 0x30, 0x33, 0x12, 0x10, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x33, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2c, 0x0a,
	0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_proto_license_proto_rawDescOnce sync.Once
	file_api_proto_license_proto_rawDescData = file_api_proto_license_proto_rawDesc
)

func file_api_proto_license_proto_rawDescGZIP() []byte {
	file_api_proto_license_proto_rawDescOnce.Do(func() {
		file_api_proto_license_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_license_proto_rawDescData)
	})
	return file_api_proto_license_proto_rawDescData
}

var file_api_proto_license_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_proto_license_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_proto_license_proto_goTypes = []interface{}{
	(Status)(0),             // 0: license.status
	(LicenseType)(0),        // 1: license.licenseType
	(*LicenseRequest)(nil),  // 2: license.licenseRequest
	(*LicenseResponse)(nil), // 3: license.licenseResponse
	(*LicensePayload)(nil),  // 4: license.licensePayload
}
var file_api_proto_license_proto_depIdxs = []int32{
	0, // 0: license.licenseResponse.Status:type_name -> license.status
	1, // 1: license.licenseResponse.type:type_name -> license.licenseType
	2, // 2: license.LicenseService.GetLicense:input_type -> license.licenseRequest
	4, // 3: license.LicenseService.uploadLicense:input_type -> license.licensePayload
	3, // 4: license.LicenseService.GetLicense:output_type -> license.licenseResponse
	3, // 5: license.LicenseService.uploadLicense:output_type -> license.licenseResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_api_proto_license_proto_init() }
func file_api_proto_license_proto_init() {
	if File_api_proto_license_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_license_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_license_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_license_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicensePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_license_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_license_proto_goTypes,
		DependencyIndexes: file_api_proto_license_proto_depIdxs,
		EnumInfos:         file_api_proto_license_proto_enumTypes,
		MessageInfos:      file_api_proto_license_proto_msgTypes,
	}.Build()
	File_api_proto_license_proto = out.File
	file_api_proto_license_proto_rawDesc = nil
	file_api_proto_license_proto_goTypes = nil
	file_api_proto_license_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LicenseServiceClient is the client API for LicenseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LicenseServiceClient interface {
	GetLicense(ctx context.Context, in *LicenseRequest, opts ...grpc.CallOption) (*LicenseResponse, error)
	UploadLicense(ctx context.Context, in *LicensePayload, opts ...grpc.CallOption) (*LicenseResponse, error)
}

type licenseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLicenseServiceClient(cc grpc.ClientConnInterface) LicenseServiceClient {
	return &licenseServiceClient{cc}
}

func (c *licenseServiceClient) GetLicense(ctx context.Context, in *LicenseRequest, opts ...grpc.CallOption) (*LicenseResponse, error) {
	out := new(LicenseResponse)
	err := c.cc.Invoke(ctx, "/license.LicenseService/GetLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseServiceClient) UploadLicense(ctx context.Context, in *LicensePayload, opts ...grpc.CallOption) (*LicenseResponse, error) {
	out := new(LicenseResponse)
	err := c.cc.Invoke(ctx, "/license.LicenseService/uploadLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicenseServiceServer is the server API for LicenseService service.
type LicenseServiceServer interface {
	GetLicense(context.Context, *LicenseRequest) (*LicenseResponse, error)
	UploadLicense(context.Context, *LicensePayload) (*LicenseResponse, error)
}

// UnimplementedLicenseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLicenseServiceServer struct {
}

func (*UnimplementedLicenseServiceServer) GetLicense(context.Context, *LicenseRequest) (*LicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicense not implemented")
}
func (*UnimplementedLicenseServiceServer) UploadLicense(context.Context, *LicensePayload) (*LicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadLicense not implemented")
}

func RegisterLicenseServiceServer(s *grpc.Server, srv LicenseServiceServer) {
	s.RegisterService(&_LicenseService_serviceDesc, srv)
}

func _LicenseService_GetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServiceServer).GetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/license.LicenseService/GetLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServiceServer).GetLicense(ctx, req.(*LicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseService_UploadLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicensePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServiceServer).UploadLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/license.LicenseService/UploadLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServiceServer).UploadLicense(ctx, req.(*LicensePayload))
	}
	return interceptor(ctx, in, info, handler)
}

var _LicenseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "license.LicenseService",
	HandlerType: (*LicenseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLicense",
			Handler:    _LicenseService_GetLicense_Handler,
		},
		{
			MethodName: "uploadLicense",
			Handler:    _LicenseService_UploadLicense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/license.proto",
}
