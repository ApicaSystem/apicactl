// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.12.4
// source: api/proto/query.proto

package query

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderBy int32

const (
	OrderBy_ASC  OrderBy = 0
	OrderBy_DESC OrderBy = 1
)

// Enum value maps for OrderBy.
var (
	OrderBy_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	OrderBy_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x OrderBy) Enum() *OrderBy {
	p := new(OrderBy)
	*p = x
	return p
}

func (x OrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_query_proto_enumTypes[0].Descriptor()
}

func (OrderBy) Type() protoreflect.EnumType {
	return &file_api_proto_query_proto_enumTypes[0]
}

func (x OrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderBy.Descriptor instead.
func (OrderBy) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{0}
}

type QueryType int32

const (
	QueryType_Search        QueryType = 0
	QueryType_Fetch         QueryType = 1
	QueryType_AdvanceSearch QueryType = 2
	QueryType_Report        QueryType = 3
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0: "Search",
		1: "Fetch",
		2: "AdvanceSearch",
		3: "Report",
	}
	QueryType_value = map[string]int32{
		"Search":        0,
		"Fetch":         1,
		"AdvanceSearch": 2,
		"Report":        3,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_query_proto_enumTypes[1].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_api_proto_query_proto_enumTypes[1]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{1}
}

type StructuredDataValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StructuredDataValues) Reset() {
	*x = StructuredDataValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuredDataValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredDataValues) ProtoMessage() {}

func (x *StructuredDataValues) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredDataValues.ProtoReflect.Descriptor instead.
func (*StructuredDataValues) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{0}
}

func (x *StructuredDataValues) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type SysLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName        string   `protobuf:"bytes,2,opt,name=AppName,proto3" json:"AppName,omitempty"`
	Facility       string   `protobuf:"bytes,3,opt,name=Facility,proto3" json:"Facility,omitempty"`
	FacilityString string   `protobuf:"bytes,4,opt,name=FacilityString,proto3" json:"FacilityString,omitempty"`
	Hostname       string   `protobuf:"bytes,5,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	Message        string   `protobuf:"bytes,6,opt,name=Message,proto3" json:"Message,omitempty"`
	MsgID          string   `protobuf:"bytes,7,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Priority       string   `protobuf:"bytes,9,opt,name=Priority,proto3" json:"Priority,omitempty"`
	ProcID         string   `protobuf:"bytes,10,opt,name=ProcID,proto3" json:"ProcID,omitempty"`
	Sender         string   `protobuf:"bytes,11,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Severity       string   `protobuf:"bytes,12,opt,name=Severity,proto3" json:"Severity,omitempty"`
	SeverityString string   `protobuf:"bytes,13,opt,name=SeverityString,proto3" json:"SeverityString,omitempty"`
	StructuredData []*Facet `protobuf:"bytes,14,rep,name=StructuredData,proto3" json:"StructuredData,omitempty"`
	Tag            string   `protobuf:"bytes,15,opt,name=Tag,proto3" json:"Tag,omitempty"`
	Timestamp      string   `protobuf:"bytes,16,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Namespace      string   `protobuf:"bytes,17,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Event          string   `protobuf:"bytes,18,opt,name=Event,proto3" json:"Event,omitempty"`
	EventId        string   `protobuf:"bytes,19,opt,name=EventId,proto3" json:"EventId,omitempty"`
	MsTimestamp    int64    `protobuf:"varint,20,opt,name=MsTimestamp,proto3" json:"MsTimestamp,omitempty"`
	STimestamp     int64    `protobuf:"varint,21,opt,name=STimestamp,proto3" json:"STimestamp,omitempty"`
}

func (x *SysLogMessage) Reset() {
	*x = SysLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysLogMessage) ProtoMessage() {}

func (x *SysLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysLogMessage.ProtoReflect.Descriptor instead.
func (*SysLogMessage) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{1}
}

func (x *SysLogMessage) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *SysLogMessage) GetFacility() string {
	if x != nil {
		return x.Facility
	}
	return ""
}

func (x *SysLogMessage) GetFacilityString() string {
	if x != nil {
		return x.FacilityString
	}
	return ""
}

func (x *SysLogMessage) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *SysLogMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SysLogMessage) GetMsgID() string {
	if x != nil {
		return x.MsgID
	}
	return ""
}

func (x *SysLogMessage) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *SysLogMessage) GetProcID() string {
	if x != nil {
		return x.ProcID
	}
	return ""
}

func (x *SysLogMessage) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *SysLogMessage) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *SysLogMessage) GetSeverityString() string {
	if x != nil {
		return x.SeverityString
	}
	return ""
}

func (x *SysLogMessage) GetStructuredData() []*Facet {
	if x != nil {
		return x.StructuredData
	}
	return nil
}

func (x *SysLogMessage) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *SysLogMessage) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *SysLogMessage) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SysLogMessage) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *SysLogMessage) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *SysLogMessage) GetMsTimestamp() int64 {
	if x != nil {
		return x.MsTimestamp
	}
	return 0
}

func (x *SysLogMessage) GetSTimestamp() int64 {
	if x != nil {
		return x.STimestamp
	}
	return 0
}

type Facet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Facet) Reset() {
	*x = Facet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Facet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facet) ProtoMessage() {}

func (x *Facet) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facet.ProtoReflect.Descriptor instead.
func (*Facet) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{2}
}

func (x *Facet) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Facet) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type Pattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatternId string `protobuf:"bytes,1,opt,name=patternId,proto3" json:"patternId,omitempty"`
	Ts        int64  `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	MsgId     string `protobuf:"bytes,3,opt,name=msgId,proto3" json:"msgId,omitempty"`
}

func (x *Pattern) Reset() {
	*x = Pattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pattern) ProtoMessage() {}

func (x *Pattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pattern.ProtoReflect.Descriptor instead.
func (*Pattern) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{3}
}

func (x *Pattern) GetPatternId() string {
	if x != nil {
		return x.PatternId
	}
	return ""
}

func (x *Pattern) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *Pattern) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

type GetPatternResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*Pattern `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	MinTs int64      `protobuf:"varint,2,opt,name=minTs,proto3" json:"minTs,omitempty"`
	MaxTs int64      `protobuf:"varint,3,opt,name=maxTs,proto3" json:"maxTs,omitempty"`
}

func (x *GetPatternResponse) Reset() {
	*x = GetPatternResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPatternResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPatternResponse) ProtoMessage() {}

func (x *GetPatternResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPatternResponse.ProtoReflect.Descriptor instead.
func (*GetPatternResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{4}
}

func (x *GetPatternResponse) GetData() []*Pattern {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetPatternResponse) GetMinTs() int64 {
	if x != nil {
		return x.MinTs
	}
	return 0
}

func (x *GetPatternResponse) GetMaxTs() int64 {
	if x != nil {
		return x.MaxTs
	}
	return 0
}

type GetMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string   `protobuf:"bytes,1,opt,name=queryId,proto3" json:"queryId,omitempty"`
	MsgIds  []string `protobuf:"bytes,2,rep,name=msgIds,proto3" json:"msgIds,omitempty"`
}

func (x *GetMessagesRequest) Reset() {
	*x = GetMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesRequest) ProtoMessage() {}

func (x *GetMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesRequest.ProtoReflect.Descriptor instead.
func (*GetMessagesRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{5}
}

func (x *GetMessagesRequest) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *GetMessagesRequest) GetMsgIds() []string {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

type GetMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*SysLogMessage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetMessagesResponse) Reset() {
	*x = GetMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesResponse) ProtoMessage() {}

func (x *GetMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesResponse.ProtoReflect.Descriptor instead.
func (*GetMessagesResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{6}
}

func (x *GetMessagesResponse) GetData() []*SysLogMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type FilterValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *FilterValues) Reset() {
	*x = FilterValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterValues) ProtoMessage() {}

func (x *FilterValues) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterValues.ProtoReflect.Descriptor instead.
func (*FilterValues) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{7}
}

func (x *FilterValues) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type FacetValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *FacetValues) Reset() {
	*x = FacetValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetValues) ProtoMessage() {}

func (x *FacetValues) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetValues.ProtoReflect.Descriptor instead.
func (*FacetValues) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{8}
}

func (x *FacetValues) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type QueryProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationNames []string                 `protobuf:"bytes,1,rep,name=applicationNames,proto3" json:"applicationNames,omitempty"`
	Filters          map[string]*FilterValues `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Namespace        string                   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Order            OrderBy                  `protobuf:"varint,4,opt,name=order,proto3,enum=query.OrderBy" json:"order,omitempty"`
	PageSize         uint32                   `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	StartTime        string                   `protobuf:"bytes,7,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime          string                   `protobuf:"bytes,8,opt,name=endTime,proto3" json:"endTime,omitempty"`
	KeyWord          string                   `protobuf:"bytes,9,opt,name=keyWord,proto3" json:"keyWord,omitempty"`
	Destination      string                   `protobuf:"bytes,10,opt,name=destination,proto3" json:"destination,omitempty"`
	Facets           bool                     `protobuf:"varint,11,opt,name=facets,proto3" json:"facets,omitempty"`
	QType            QueryType                `protobuf:"varint,12,opt,name=qType,proto3,enum=query.QueryType" json:"qType,omitempty"`
	Patterns         bool                     `protobuf:"varint,13,opt,name=patterns,proto3" json:"patterns,omitempty"`
	IsAdvanceQuery   bool                     `protobuf:"varint,14,opt,name=isAdvanceQuery,proto3" json:"isAdvanceQuery,omitempty"`
	ReportDefinition string                   `protobuf:"bytes,15,opt,name=reportDefinition,proto3" json:"reportDefinition,omitempty"`
}

func (x *QueryProperties) Reset() {
	*x = QueryProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProperties) ProtoMessage() {}

func (x *QueryProperties) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProperties.ProtoReflect.Descriptor instead.
func (*QueryProperties) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{9}
}

func (x *QueryProperties) GetApplicationNames() []string {
	if x != nil {
		return x.ApplicationNames
	}
	return nil
}

func (x *QueryProperties) GetFilters() map[string]*FilterValues {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *QueryProperties) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *QueryProperties) GetOrder() OrderBy {
	if x != nil {
		return x.Order
	}
	return OrderBy_ASC
}

func (x *QueryProperties) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryProperties) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *QueryProperties) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *QueryProperties) GetKeyWord() string {
	if x != nil {
		return x.KeyWord
	}
	return ""
}

func (x *QueryProperties) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *QueryProperties) GetFacets() bool {
	if x != nil {
		return x.Facets
	}
	return false
}

func (x *QueryProperties) GetQType() QueryType {
	if x != nil {
		return x.QType
	}
	return QueryType_Search
}

func (x *QueryProperties) GetPatterns() bool {
	if x != nil {
		return x.Patterns
	}
	return false
}

func (x *QueryProperties) GetIsAdvanceQuery() bool {
	if x != nil {
		return x.IsAdvanceQuery
	}
	return false
}

func (x *QueryProperties) GetReportDefinition() string {
	if x != nil {
		return x.ReportDefinition
	}
	return ""
}

type GetQueryByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace        string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ApplicationNames []string `protobuf:"bytes,2,rep,name=applicationNames,proto3" json:"applicationNames,omitempty"`
	StartTime        int64    `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime          int64    `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	KeyWord          string   `protobuf:"bytes,5,opt,name=keyWord,proto3" json:"keyWord,omitempty"`
	IsAdvanceQuery   bool     `protobuf:"varint,6,opt,name=isAdvanceQuery,proto3" json:"isAdvanceQuery,omitempty"`
}

func (x *GetQueryByIdResponse) Reset() {
	*x = GetQueryByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryByIdResponse) ProtoMessage() {}

func (x *GetQueryByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryByIdResponse.ProtoReflect.Descriptor instead.
func (*GetQueryByIdResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{10}
}

func (x *GetQueryByIdResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetQueryByIdResponse) GetApplicationNames() []string {
	if x != nil {
		return x.ApplicationNames
	}
	return nil
}

func (x *GetQueryByIdResponse) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetQueryByIdResponse) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetQueryByIdResponse) GetKeyWord() string {
	if x != nil {
		return x.KeyWord
	}
	return ""
}

func (x *GetQueryByIdResponse) GetIsAdvanceQuery() bool {
	if x != nil {
		return x.IsAdvanceQuery
	}
	return false
}

type GetDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string   `protobuf:"bytes,1,opt,name=queryId,proto3" json:"queryId,omitempty"`
	Facets  []*Facet `protobuf:"bytes,2,rep,name=facets,proto3" json:"facets,omitempty"`
}

func (x *GetDataRequest) Reset() {
	*x = GetDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataRequest) ProtoMessage() {}

func (x *GetDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataRequest.ProtoReflect.Descriptor instead.
func (*GetDataRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{11}
}

func (x *GetDataRequest) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *GetDataRequest) GetFacets() []*Facet {
	if x != nil {
		return x.Facets
	}
	return nil
}

type GetPatternsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string  `protobuf:"bytes,1,opt,name=queryId,proto3" json:"queryId,omitempty"`
	Order   OrderBy `protobuf:"varint,2,opt,name=order,proto3,enum=query.OrderBy" json:"order,omitempty"`
}

func (x *GetPatternsRequest) Reset() {
	*x = GetPatternsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPatternsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPatternsRequest) ProtoMessage() {}

func (x *GetPatternsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPatternsRequest.ProtoReflect.Descriptor instead.
func (*GetPatternsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{12}
}

func (x *GetPatternsRequest) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *GetPatternsRequest) GetOrder() OrderBy {
	if x != nil {
		return x.Order
	}
	return OrderBy_ASC
}

type Progress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	OutOf string `protobuf:"bytes,2,opt,name=outOf,proto3" json:"outOf,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Progress) Reset() {
	*x = Progress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Progress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Progress) ProtoMessage() {}

func (x *Progress) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Progress.ProtoReflect.Descriptor instead.
func (*Progress) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{13}
}

func (x *Progress) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Progress) GetOutOf() string {
	if x != nil {
		return x.OutOf
	}
	return ""
}

func (x *Progress) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data             []*SysLogMessage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Status           string           `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Remaining        int32            `protobuf:"varint,3,opt,name=remaining,proto3" json:"remaining,omitempty"`
	Facets           []*Facet         `protobuf:"bytes,4,rep,name=facets,proto3" json:"facets,omitempty"`
	Percent          *Progress        `protobuf:"bytes,6,opt,name=percent,proto3" json:"percent,omitempty"`
	Size             *Progress        `protobuf:"bytes,7,opt,name=size,proto3" json:"size,omitempty"`
	ResponsePageSize int32            `protobuf:"varint,8,opt,name=responsePageSize,proto3" json:"responsePageSize,omitempty"`
	Patterns         []*Patterns      `protobuf:"bytes,9,rep,name=patterns,proto3" json:"patterns,omitempty"`
}

func (x *GetDataResponse) Reset() {
	*x = GetDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataResponse) ProtoMessage() {}

func (x *GetDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataResponse.ProtoReflect.Descriptor instead.
func (*GetDataResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{14}
}

func (x *GetDataResponse) GetData() []*SysLogMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetDataResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetDataResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *GetDataResponse) GetFacets() []*Facet {
	if x != nil {
		return x.Facets
	}
	return nil
}

func (x *GetDataResponse) GetPercent() *Progress {
	if x != nil {
		return x.Percent
	}
	return nil
}

func (x *GetDataResponse) GetSize() *Progress {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *GetDataResponse) GetResponsePageSize() int32 {
	if x != nil {
		return x.ResponsePageSize
	}
	return 0
}

func (x *GetDataResponse) GetPatterns() []*Patterns {
	if x != nil {
		return x.Patterns
	}
	return nil
}

type Patterns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatternId string `protobuf:"bytes,1,opt,name=patternId,proto3" json:"patternId,omitempty"`
	Count     int64  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Desc      string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *Patterns) Reset() {
	*x = Patterns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Patterns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patterns) ProtoMessage() {}

func (x *Patterns) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patterns.ProtoReflect.Descriptor instead.
func (*Patterns) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{15}
}

func (x *Patterns) GetPatternId() string {
	if x != nil {
		return x.PatternId
	}
	return ""
}

func (x *Patterns) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Patterns) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type ReportGroupBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=Label,proto3" json:"Label,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReportGroupBy) Reset() {
	*x = ReportGroupBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportGroupBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportGroupBy) ProtoMessage() {}

func (x *ReportGroupBy) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportGroupBy.ProtoReflect.Descriptor instead.
func (*ReportGroupBy) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{16}
}

func (x *ReportGroupBy) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ReportGroupBy) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GetReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string          `protobuf:"bytes,1,opt,name=queryId,proto3" json:"queryId,omitempty"`
	Status  string          `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Results []*ReportResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Percent *Progress       `protobuf:"bytes,4,opt,name=percent,proto3" json:"percent,omitempty"`
	Size    *Progress       `protobuf:"bytes,5,opt,name=size,proto3" json:"size,omitempty"`
	Url     string          `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GetReportResponse) Reset() {
	*x = GetReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportResponse) ProtoMessage() {}

func (x *GetReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportResponse.ProtoReflect.Descriptor instead.
func (*GetReportResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{17}
}

func (x *GetReportResponse) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *GetReportResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetReportResponse) GetResults() []*ReportResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *GetReportResponse) GetPercent() *Progress {
	if x != nil {
		return x.Percent
	}
	return nil
}

func (x *GetReportResponse) GetSize() *Progress {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *GetReportResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ReportResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp string           `protobuf:"bytes,1,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	Value     string           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	GroupBy   []*ReportGroupBy `protobuf:"bytes,3,rep,name=groupBy,proto3" json:"groupBy,omitempty"`
}

func (x *ReportResult) Reset() {
	*x = ReportResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResult) ProtoMessage() {}

func (x *ReportResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResult.ProtoReflect.Descriptor instead.
func (*ReportResult) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{18}
}

func (x *ReportResult) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

func (x *ReportResult) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ReportResult) GetGroupBy() []*ReportGroupBy {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

type GetReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string `protobuf:"bytes,1,opt,name=queryId,proto3" json:"queryId,omitempty"`
}

func (x *GetReportRequest) Reset() {
	*x = GetReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportRequest) ProtoMessage() {}

func (x *GetReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportRequest.ProtoReflect.Descriptor instead.
func (*GetReportRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{19}
}

func (x *GetReportRequest) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

type SharedQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryIds []string `protobuf:"bytes,1,rep,name=QueryIds,proto3" json:"QueryIds,omitempty"`
}

func (x *SharedQueryRequest) Reset() {
	*x = SharedQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedQueryRequest) ProtoMessage() {}

func (x *SharedQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedQueryRequest.ProtoReflect.Descriptor instead.
func (*SharedQueryRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{20}
}

func (x *SharedQueryRequest) GetQueryIds() []string {
	if x != nil {
		return x.QueryIds
	}
	return nil
}

type CancelQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string `protobuf:"bytes,1,opt,name=queryId,proto3" json:"queryId,omitempty"`
}

func (x *CancelQueryRequest) Reset() {
	*x = CancelQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelQueryRequest) ProtoMessage() {}

func (x *CancelQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelQueryRequest.ProtoReflect.Descriptor instead.
func (*CancelQueryRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{21}
}

func (x *CancelQueryRequest) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

type QueryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *QueryInfo) Reset() {
	*x = QueryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInfo) ProtoMessage() {}

func (x *QueryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInfo.ProtoReflect.Descriptor instead.
func (*QueryInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{22}
}

func (x *QueryInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *QueryInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type QueryErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *QueryErrors) Reset() {
	*x = QueryErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryErrors) ProtoMessage() {}

func (x *QueryErrors) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryErrors.ProtoReflect.Descriptor instead.
func (*QueryErrors) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{23}
}

func (x *QueryErrors) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *QueryErrors) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string            `protobuf:"bytes,1,opt,name=queryId,proto3" json:"queryId,omitempty"`
	Info    []*QueryInfo      `protobuf:"bytes,3,rep,name=info,proto3" json:"info,omitempty"`
	Errors  []*QueryErrors    `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	Meta    map[string]string `protobuf:"bytes,5,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Details string            `protobuf:"bytes,6,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *GetQueryResponse) Reset() {
	*x = GetQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_query_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryResponse) ProtoMessage() {}

func (x *GetQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_query_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryResponse.ProtoReflect.Descriptor instead.
func (*GetQueryResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_query_proto_rawDescGZIP(), []int{24}
}

func (x *GetQueryResponse) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *GetQueryResponse) GetInfo() []*QueryInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetQueryResponse) GetErrors() []*QueryErrors {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetQueryResponse) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetQueryResponse) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

var File_api_proto_query_proto protoreflect.FileDescriptor

var file_api_proto_query_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xbf, 0x04, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x4c,
	0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x26, 0x0a, 0x0e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x0e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x31, 0x0a, 0x05, 0x46, 0x61, 0x63,
	0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x07,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x54, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x54, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x61, 0x78, 0x54, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x54,
	0x73, 0x22, 0x46, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x22, 0x3f, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x79, 0x73, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x26, 0x0a, 0x0c, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x25, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xd1, 0x04, 0x0a, 0x0f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61,
	0x63, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x71, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x73, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4f, 0x0a, 0x0c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x57,
	0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x57, 0x6f,
	0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x50, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46,
	0x61, 0x63, 0x65, 0x74, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x4a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc0,
	0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x79, 0x73, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74,
	0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x52, 0x08, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x73, 0x22, 0x52, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x72, 0x0a, 0x0c, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x22,
	0x2c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x30, 0x0a,
	0x12, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x73, 0x22,
	0x2e, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22,
	0x37, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x1c,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x2a, 0x41, 0x0a, 0x09,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x03, 0x32,
	0xf0, 0x08, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4e, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x1a, 0x17, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x5d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x65, 0x78, 0x74, 0x12,
	0x15, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x12,
	0x65, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x12, 0x15, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x7d, 0x2f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x61, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x15, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a,
	0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x69, 0x0a, 0x10, 0x50, 0x6f, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x15, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x12, 0x6e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x12, 0x71, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12, 0x19, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x7d, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x7d,
	0x12, 0x5c, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x19, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x7d, 0x12, 0x70,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12, 0x19, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10,
	0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x12, 0x60, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x42, 0xd7, 0x01, 0x92, 0x41, 0x9f, 0x01, 0x12, 0x0c, 0x0a, 0x05, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52,
	0x19, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x17, 0x0a, 0x03, 0x34, 0x30,
	0x33, 0x12, 0x10, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x2e, 0x52, 0x33, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2c, 0x0a, 0x2a, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x70, 0x69, 0x63, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x61, 0x70, 0x69, 0x63, 0x61, 0x63, 0x74, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_query_proto_rawDescOnce sync.Once
	file_api_proto_query_proto_rawDescData = file_api_proto_query_proto_rawDesc
)

func file_api_proto_query_proto_rawDescGZIP() []byte {
	file_api_proto_query_proto_rawDescOnce.Do(func() {
		file_api_proto_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_query_proto_rawDescData)
	})
	return file_api_proto_query_proto_rawDescData
}

var file_api_proto_query_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_proto_query_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_api_proto_query_proto_goTypes = []interface{}{
	(OrderBy)(0),                 // 0: query.OrderBy
	(QueryType)(0),               // 1: query.QueryType
	(*StructuredDataValues)(nil), // 2: query.StructuredDataValues
	(*SysLogMessage)(nil),        // 3: query.SysLogMessage
	(*Facet)(nil),                // 4: query.Facet
	(*Pattern)(nil),              // 5: query.Pattern
	(*GetPatternResponse)(nil),   // 6: query.GetPatternResponse
	(*GetMessagesRequest)(nil),   // 7: query.GetMessagesRequest
	(*GetMessagesResponse)(nil),  // 8: query.GetMessagesResponse
	(*FilterValues)(nil),         // 9: query.FilterValues
	(*FacetValues)(nil),          // 10: query.FacetValues
	(*QueryProperties)(nil),      // 11: query.QueryProperties
	(*GetQueryByIdResponse)(nil), // 12: query.GetQueryByIdResponse
	(*GetDataRequest)(nil),       // 13: query.GetDataRequest
	(*GetPatternsRequest)(nil),   // 14: query.GetPatternsRequest
	(*Progress)(nil),             // 15: query.Progress
	(*GetDataResponse)(nil),      // 16: query.GetDataResponse
	(*Patterns)(nil),             // 17: query.Patterns
	(*ReportGroupBy)(nil),        // 18: query.ReportGroupBy
	(*GetReportResponse)(nil),    // 19: query.GetReportResponse
	(*ReportResult)(nil),         // 20: query.ReportResult
	(*GetReportRequest)(nil),     // 21: query.GetReportRequest
	(*SharedQueryRequest)(nil),   // 22: query.SharedQueryRequest
	(*CancelQueryRequest)(nil),   // 23: query.CancelQueryRequest
	(*QueryInfo)(nil),            // 24: query.QueryInfo
	(*QueryErrors)(nil),          // 25: query.QueryErrors
	(*GetQueryResponse)(nil),     // 26: query.GetQueryResponse
	nil,                          // 27: query.QueryProperties.FiltersEntry
	nil,                          // 28: query.GetQueryResponse.MetaEntry
	(*empty.Empty)(nil),          // 29: google.protobuf.Empty
}
var file_api_proto_query_proto_depIdxs = []int32{
	4,  // 0: query.SysLogMessage.StructuredData:type_name -> query.Facet
	5,  // 1: query.GetPatternResponse.data:type_name -> query.Pattern
	3,  // 2: query.GetMessagesResponse.data:type_name -> query.SysLogMessage
	27, // 3: query.QueryProperties.filters:type_name -> query.QueryProperties.FiltersEntry
	0,  // 4: query.QueryProperties.order:type_name -> query.OrderBy
	1,  // 5: query.QueryProperties.qType:type_name -> query.QueryType
	4,  // 6: query.GetDataRequest.facets:type_name -> query.Facet
	0,  // 7: query.GetPatternsRequest.order:type_name -> query.OrderBy
	3,  // 8: query.GetDataResponse.data:type_name -> query.SysLogMessage
	4,  // 9: query.GetDataResponse.facets:type_name -> query.Facet
	15, // 10: query.GetDataResponse.percent:type_name -> query.Progress
	15, // 11: query.GetDataResponse.size:type_name -> query.Progress
	17, // 12: query.GetDataResponse.patterns:type_name -> query.Patterns
	20, // 13: query.GetReportResponse.results:type_name -> query.ReportResult
	15, // 14: query.GetReportResponse.percent:type_name -> query.Progress
	15, // 15: query.GetReportResponse.size:type_name -> query.Progress
	18, // 16: query.ReportResult.groupBy:type_name -> query.ReportGroupBy
	24, // 17: query.GetQueryResponse.info:type_name -> query.QueryInfo
	25, // 18: query.GetQueryResponse.errors:type_name -> query.QueryErrors
	28, // 19: query.GetQueryResponse.meta:type_name -> query.GetQueryResponse.MetaEntry
	9,  // 20: query.QueryProperties.FiltersEntry.value:type_name -> query.FilterValues
	11, // 21: query.QueryService.Query:input_type -> query.QueryProperties
	13, // 22: query.QueryService.GetDataNext:input_type -> query.GetDataRequest
	13, // 23: query.QueryService.GetDataPrevious:input_type -> query.GetDataRequest
	13, // 24: query.QueryService.PostDataNext:input_type -> query.GetDataRequest
	13, // 25: query.QueryService.PostDataPrevious:input_type -> query.GetDataRequest
	14, // 26: query.QueryService.GetPatternData:input_type -> query.GetPatternsRequest
	7,  // 27: query.QueryService.PostMessagesById:input_type -> query.GetMessagesRequest
	21, // 28: query.QueryService.GetReportResult:input_type -> query.GetReportRequest
	23, // 29: query.QueryService.CancelQuery:input_type -> query.CancelQueryRequest
	22, // 30: query.QueryService.GetSharedQueryDetailsById:input_type -> query.SharedQueryRequest
	22, // 31: query.QueryService.ShareQuery:input_type -> query.SharedQueryRequest
	26, // 32: query.QueryService.Query:output_type -> query.GetQueryResponse
	16, // 33: query.QueryService.GetDataNext:output_type -> query.GetDataResponse
	16, // 34: query.QueryService.GetDataPrevious:output_type -> query.GetDataResponse
	16, // 35: query.QueryService.PostDataNext:output_type -> query.GetDataResponse
	16, // 36: query.QueryService.PostDataPrevious:output_type -> query.GetDataResponse
	6,  // 37: query.QueryService.GetPatternData:output_type -> query.GetPatternResponse
	8,  // 38: query.QueryService.PostMessagesById:output_type -> query.GetMessagesResponse
	19, // 39: query.QueryService.GetReportResult:output_type -> query.GetReportResponse
	29, // 40: query.QueryService.CancelQuery:output_type -> google.protobuf.Empty
	12, // 41: query.QueryService.GetSharedQueryDetailsById:output_type -> query.GetQueryByIdResponse
	29, // 42: query.QueryService.ShareQuery:output_type -> google.protobuf.Empty
	32, // [32:43] is the sub-list for method output_type
	21, // [21:32] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_api_proto_query_proto_init() }
func file_api_proto_query_proto_init() {
	if File_api_proto_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructuredDataValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Facet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPatternResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacetValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueryByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPatternsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Progress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Patterns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportGroupBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_query_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_query_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_query_proto_goTypes,
		DependencyIndexes: file_api_proto_query_proto_depIdxs,
		EnumInfos:         file_api_proto_query_proto_enumTypes,
		MessageInfos:      file_api_proto_query_proto_msgTypes,
	}.Build()
	File_api_proto_query_proto = out.File
	file_api_proto_query_proto_rawDesc = nil
	file_api_proto_query_proto_goTypes = nil
	file_api_proto_query_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	Query(ctx context.Context, in *QueryProperties, opts ...grpc.CallOption) (*GetQueryResponse, error)
	GetDataNext(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	GetDataPrevious(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	PostDataNext(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	PostDataPrevious(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	GetPatternData(ctx context.Context, in *GetPatternsRequest, opts ...grpc.CallOption) (*GetPatternResponse, error)
	PostMessagesById(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	GetReportResult(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetReportResponse, error)
	CancelQuery(ctx context.Context, in *CancelQueryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSharedQueryDetailsById(ctx context.Context, in *SharedQueryRequest, opts ...grpc.CallOption) (*GetQueryByIdResponse, error)
	ShareQuery(ctx context.Context, in *SharedQueryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) Query(ctx context.Context, in *QueryProperties, opts ...grpc.CallOption) (*GetQueryResponse, error) {
	out := new(GetQueryResponse)
	err := c.cc.Invoke(ctx, "/query.QueryService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDataNext(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, "/query.QueryService/GetDataNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDataPrevious(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, "/query.QueryService/GetDataPrevious", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) PostDataNext(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, "/query.QueryService/PostDataNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) PostDataPrevious(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, "/query.QueryService/PostDataPrevious", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPatternData(ctx context.Context, in *GetPatternsRequest, opts ...grpc.CallOption) (*GetPatternResponse, error) {
	out := new(GetPatternResponse)
	err := c.cc.Invoke(ctx, "/query.QueryService/GetPatternData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) PostMessagesById(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, "/query.QueryService/PostMessagesById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetReportResult(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetReportResponse, error) {
	out := new(GetReportResponse)
	err := c.cc.Invoke(ctx, "/query.QueryService/GetReportResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CancelQuery(ctx context.Context, in *CancelQueryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/query.QueryService/CancelQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetSharedQueryDetailsById(ctx context.Context, in *SharedQueryRequest, opts ...grpc.CallOption) (*GetQueryByIdResponse, error) {
	out := new(GetQueryByIdResponse)
	err := c.cc.Invoke(ctx, "/query.QueryService/GetSharedQueryDetailsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ShareQuery(ctx context.Context, in *SharedQueryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/query.QueryService/ShareQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	Query(context.Context, *QueryProperties) (*GetQueryResponse, error)
	GetDataNext(context.Context, *GetDataRequest) (*GetDataResponse, error)
	GetDataPrevious(context.Context, *GetDataRequest) (*GetDataResponse, error)
	PostDataNext(context.Context, *GetDataRequest) (*GetDataResponse, error)
	PostDataPrevious(context.Context, *GetDataRequest) (*GetDataResponse, error)
	GetPatternData(context.Context, *GetPatternsRequest) (*GetPatternResponse, error)
	PostMessagesById(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error)
	GetReportResult(context.Context, *GetReportRequest) (*GetReportResponse, error)
	CancelQuery(context.Context, *CancelQueryRequest) (*empty.Empty, error)
	GetSharedQueryDetailsById(context.Context, *SharedQueryRequest) (*GetQueryByIdResponse, error)
	ShareQuery(context.Context, *SharedQueryRequest) (*empty.Empty, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) Query(context.Context, *QueryProperties) (*GetQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedQueryServiceServer) GetDataNext(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataNext not implemented")
}
func (*UnimplementedQueryServiceServer) GetDataPrevious(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataPrevious not implemented")
}
func (*UnimplementedQueryServiceServer) PostDataNext(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDataNext not implemented")
}
func (*UnimplementedQueryServiceServer) PostDataPrevious(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDataPrevious not implemented")
}
func (*UnimplementedQueryServiceServer) GetPatternData(context.Context, *GetPatternsRequest) (*GetPatternResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatternData not implemented")
}
func (*UnimplementedQueryServiceServer) PostMessagesById(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMessagesById not implemented")
}
func (*UnimplementedQueryServiceServer) GetReportResult(context.Context, *GetReportRequest) (*GetReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportResult not implemented")
}
func (*UnimplementedQueryServiceServer) CancelQuery(context.Context, *CancelQueryRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelQuery not implemented")
}
func (*UnimplementedQueryServiceServer) GetSharedQueryDetailsById(context.Context, *SharedQueryRequest) (*GetQueryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSharedQueryDetailsById not implemented")
}
func (*UnimplementedQueryServiceServer) ShareQuery(context.Context, *SharedQueryRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareQuery not implemented")
}

func RegisterQueryServiceServer(s *grpc.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProperties)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.QueryService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Query(ctx, req.(*QueryProperties))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDataNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDataNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.QueryService/GetDataNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDataNext(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDataPrevious_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDataPrevious(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.QueryService/GetDataPrevious",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDataPrevious(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_PostDataNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).PostDataNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.QueryService/PostDataNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).PostDataNext(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_PostDataPrevious_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).PostDataPrevious(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.QueryService/PostDataPrevious",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).PostDataPrevious(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPatternData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatternsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPatternData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.QueryService/GetPatternData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPatternData(ctx, req.(*GetPatternsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_PostMessagesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).PostMessagesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.QueryService/PostMessagesById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).PostMessagesById(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetReportResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetReportResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.QueryService/GetReportResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetReportResult(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CancelQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CancelQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.QueryService/CancelQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CancelQuery(ctx, req.(*CancelQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetSharedQueryDetailsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetSharedQueryDetailsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.QueryService/GetSharedQueryDetailsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetSharedQueryDetailsById(ctx, req.(*SharedQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ShareQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ShareQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.QueryService/ShareQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ShareQuery(ctx, req.(*SharedQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "query.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _QueryService_Query_Handler,
		},
		{
			MethodName: "GetDataNext",
			Handler:    _QueryService_GetDataNext_Handler,
		},
		{
			MethodName: "GetDataPrevious",
			Handler:    _QueryService_GetDataPrevious_Handler,
		},
		{
			MethodName: "PostDataNext",
			Handler:    _QueryService_PostDataNext_Handler,
		},
		{
			MethodName: "PostDataPrevious",
			Handler:    _QueryService_PostDataPrevious_Handler,
		},
		{
			MethodName: "GetPatternData",
			Handler:    _QueryService_GetPatternData_Handler,
		},
		{
			MethodName: "PostMessagesById",
			Handler:    _QueryService_PostMessagesById_Handler,
		},
		{
			MethodName: "GetReportResult",
			Handler:    _QueryService_GetReportResult_Handler,
		},
		{
			MethodName: "CancelQuery",
			Handler:    _QueryService_CancelQuery_Handler,
		},
		{
			MethodName: "GetSharedQueryDetailsById",
			Handler:    _QueryService_GetSharedQueryDetailsById_Handler,
		},
		{
			MethodName: "ShareQuery",
			Handler:    _QueryService_ShareQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/query.proto",
}
