// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.12.4
// source: api/proto/eventRules.proto

package eventRules

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricType int32

const (
	MetricType_NOVAL     MetricType = 0
	MetricType_GAUGE     MetricType = 1
	MetricType_COUNTER   MetricType = 2
	MetricType_HISTOGRAM MetricType = 3
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "NOVAL",
		1: "GAUGE",
		2: "COUNTER",
		3: "HISTOGRAM",
	}
	MetricType_value = map[string]int32{
		"NOVAL":     0,
		"GAUGE":     1,
		"COUNTER":   2,
		"HISTOGRAM": 3,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_eventRules_proto_enumTypes[0].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_api_proto_eventRules_proto_enumTypes[0]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{0}
}

type SortOrderEnums int32

const (
	SortOrderEnums_UNKNOWN SortOrderEnums = 0
	SortOrderEnums_ASC     SortOrderEnums = 1
	SortOrderEnums_DESC    SortOrderEnums = 2
)

// Enum value maps for SortOrderEnums.
var (
	SortOrderEnums_name = map[int32]string{
		0: "UNKNOWN",
		1: "ASC",
		2: "DESC",
	}
	SortOrderEnums_value = map[string]int32{
		"UNKNOWN": 0,
		"ASC":     1,
		"DESC":    2,
	}
)

func (x SortOrderEnums) Enum() *SortOrderEnums {
	p := new(SortOrderEnums)
	*p = x
	return p
}

func (x SortOrderEnums) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrderEnums) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_eventRules_proto_enumTypes[1].Descriptor()
}

func (SortOrderEnums) Type() protoreflect.EnumType {
	return &file_api_proto_eventRules_proto_enumTypes[1]
}

func (x SortOrderEnums) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrderEnums.Descriptor instead.
func (SortOrderEnums) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{1}
}

type EventMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type         MetricType    `protobuf:"varint,2,opt,name=type,proto3,enum=eventRules.MetricType" json:"type,omitempty"`
	TargetField  string        `protobuf:"bytes,3,opt,name=targetField,proto3" json:"targetField,omitempty"`
	FieldType    string        `protobuf:"bytes,4,opt,name=fieldType,proto3" json:"fieldType,omitempty"`
	PlotType     string        `protobuf:"bytes,5,opt,name=plotType,proto3" json:"plotType,omitempty"`
	Regex        bool          `protobuf:"varint,6,opt,name=regex,proto3" json:"regex,omitempty"`
	PatternLabel *PatternLabel `protobuf:"bytes,7,opt,name=patternLabel,proto3" json:"patternLabel,omitempty"`
	UniqueHash   string        `protobuf:"bytes,8,opt,name=uniqueHash,proto3" json:"uniqueHash,omitempty"`
}

func (x *EventMetric) Reset() {
	*x = EventMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMetric) ProtoMessage() {}

func (x *EventMetric) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMetric.ProtoReflect.Descriptor instead.
func (*EventMetric) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{0}
}

func (x *EventMetric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventMetric) GetType() MetricType {
	if x != nil {
		return x.Type
	}
	return MetricType_NOVAL
}

func (x *EventMetric) GetTargetField() string {
	if x != nil {
		return x.TargetField
	}
	return ""
}

func (x *EventMetric) GetFieldType() string {
	if x != nil {
		return x.FieldType
	}
	return ""
}

func (x *EventMetric) GetPlotType() string {
	if x != nil {
		return x.PlotType
	}
	return ""
}

func (x *EventMetric) GetRegex() bool {
	if x != nil {
		return x.Regex
	}
	return false
}

func (x *EventMetric) GetPatternLabel() *PatternLabel {
	if x != nil {
		return x.PatternLabel
	}
	return nil
}

func (x *EventMetric) GetUniqueHash() string {
	if x != nil {
		return x.UniqueHash
	}
	return ""
}

type PatternLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// string matchedPattern = 2;
	MatchedNames []string `protobuf:"bytes,3,rep,name=matchedNames,proto3" json:"matchedNames,omitempty"`
}

func (x *PatternLabel) Reset() {
	*x = PatternLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternLabel) ProtoMessage() {}

func (x *PatternLabel) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternLabel.ProtoReflect.Descriptor instead.
func (*PatternLabel) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{1}
}

func (x *PatternLabel) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *PatternLabel) GetMatchedNames() []string {
	if x != nil {
		return x.MatchedNames
	}
	return nil
}

type EventRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Level       string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	Condition   string `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	Match       string `protobuf:"bytes,20,opt,name=match,proto3" json:"match,omitempty"`
	Rewrite     string `protobuf:"bytes,21,opt,name=rewrite,proto3" json:"rewrite,omitempty"`
	// map<string,string> extract = 5;
	GroupName         string          `protobuf:"bytes,6,opt,name=groupName,proto3" json:"groupName,omitempty"`
	Active            int32           `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`       // used as boolean 0 to inactive and 1 to active
	Immutable         int32           `protobuf:"varint,8,opt,name=immutable,proto3" json:"immutable,omitempty"` // used as boolean 0 for mutable and 1 to immutable
	RuleType          string          `protobuf:"bytes,9,opt,name=ruleType,proto3" json:"ruleType,omitempty"`    // possible values {"REGEX", "EVALUATE"} Dectates how to apply rule to logline.
	ApplicationMatch  string          `protobuf:"bytes,10,opt,name=applicationMatch,proto3" json:"applicationMatch,omitempty"`
	AlertConfigured   int32           `protobuf:"varint,11,opt,name=alertConfigured,proto3" json:"alertConfigured,omitempty"`
	RecordMetricsOnly int32           `protobuf:"varint,12,opt,name=recordMetricsOnly,proto3" json:"recordMetricsOnly,omitempty"` // used as boolean, if 1 only record the event counter with prometheus and NOT store event in db
	EventMetrics      []*EventMetric  `protobuf:"bytes,13,rep,name=eventMetrics,proto3" json:"eventMetrics,omitempty"`
	AdditionalLabels  []string        `protobuf:"bytes,14,rep,name=additionalLabels,proto3" json:"additionalLabels,omitempty"`
	PatternLabels     []*PatternLabel `protobuf:"bytes,15,rep,name=patternLabels,proto3" json:"patternLabels,omitempty"`
	Tags              []string        `protobuf:"bytes,16,rep,name=tags,proto3" json:"tags,omitempty"`
	CreatedAt         int64           `protobuf:"varint,17,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedBy         string          `protobuf:"bytes,18,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	ExtRuleType       string          `protobuf:"bytes,19,opt,name=extRuleType,proto3" json:"extRuleType,omitempty"`
	Namespace         string          `protobuf:"bytes,22,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *EventRule) Reset() {
	*x = EventRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRule) ProtoMessage() {}

func (x *EventRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRule.ProtoReflect.Descriptor instead.
func (*EventRule) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{2}
}

func (x *EventRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EventRule) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *EventRule) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *EventRule) GetMatch() string {
	if x != nil {
		return x.Match
	}
	return ""
}

func (x *EventRule) GetRewrite() string {
	if x != nil {
		return x.Rewrite
	}
	return ""
}

func (x *EventRule) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *EventRule) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *EventRule) GetImmutable() int32 {
	if x != nil {
		return x.Immutable
	}
	return 0
}

func (x *EventRule) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *EventRule) GetApplicationMatch() string {
	if x != nil {
		return x.ApplicationMatch
	}
	return ""
}

func (x *EventRule) GetAlertConfigured() int32 {
	if x != nil {
		return x.AlertConfigured
	}
	return 0
}

func (x *EventRule) GetRecordMetricsOnly() int32 {
	if x != nil {
		return x.RecordMetricsOnly
	}
	return 0
}

func (x *EventRule) GetEventMetrics() []*EventMetric {
	if x != nil {
		return x.EventMetrics
	}
	return nil
}

func (x *EventRule) GetAdditionalLabels() []string {
	if x != nil {
		return x.AdditionalLabels
	}
	return nil
}

func (x *EventRule) GetPatternLabels() []*PatternLabel {
	if x != nil {
		return x.PatternLabels
	}
	return nil
}

func (x *EventRule) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *EventRule) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *EventRule) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *EventRule) GetExtRuleType() string {
	if x != nil {
		return x.ExtRuleType
	}
	return ""
}

func (x *EventRule) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type EventRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset     int64        `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Count      int64        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	TotalCount int64        `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	EventRules []*EventRule `protobuf:"bytes,4,rep,name=eventRules,proto3" json:"eventRules,omitempty"`
}

func (x *EventRulesResponse) Reset() {
	*x = EventRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRulesResponse) ProtoMessage() {}

func (x *EventRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRulesResponse.ProtoReflect.Descriptor instead.
func (*EventRulesResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{3}
}

func (x *EventRulesResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *EventRulesResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EventRulesResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *EventRulesResponse) GetEventRules() []*EventRule {
	if x != nil {
		return x.EventRules
	}
	return nil
}

type EventRulesResponseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *EventRulesResponseResult) Reset() {
	*x = EventRulesResponseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRulesResponseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRulesResponseResult) ProtoMessage() {}

func (x *EventRulesResponseResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRulesResponseResult.ProtoReflect.Descriptor instead.
func (*EventRulesResponseResult) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{4}
}

func (x *EventRulesResponseResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type EventRulesFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names       []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	Search      string   `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"`
	Level       []string `protobuf:"bytes,3,rep,name=level,proto3" json:"level,omitempty"`
	GroupNames  []string `protobuf:"bytes,4,rep,name=groupNames,proto3" json:"groupNames,omitempty"`
	Active      int32    `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`       // used as boolean 0 to inactive and 1 to active
	Immutable   int32    `protobuf:"varint,6,opt,name=immutable,proto3" json:"immutable,omitempty"` // used as boolean 0 for mutable and 1 to immutable
	Tags        []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	CreatedBy   []string `protobuf:"bytes,8,rep,name=createdBy,proto3" json:"createdBy,omitempty"`
	ExtRuleType string   `protobuf:"bytes,10,opt,name=extRuleType,proto3" json:"extRuleType,omitempty"`
	RuleType    string   `protobuf:"bytes,11,opt,name=ruleType,proto3" json:"ruleType,omitempty"`
	CustomRules bool     `protobuf:"varint,12,opt,name=customRules,proto3" json:"customRules,omitempty"`
}

func (x *EventRulesFilter) Reset() {
	*x = EventRulesFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRulesFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRulesFilter) ProtoMessage() {}

func (x *EventRulesFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRulesFilter.ProtoReflect.Descriptor instead.
func (*EventRulesFilter) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{5}
}

func (x *EventRulesFilter) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *EventRulesFilter) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *EventRulesFilter) GetLevel() []string {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *EventRulesFilter) GetGroupNames() []string {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *EventRulesFilter) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *EventRulesFilter) GetImmutable() int32 {
	if x != nil {
		return x.Immutable
	}
	return 0
}

func (x *EventRulesFilter) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *EventRulesFilter) GetCreatedBy() []string {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *EventRulesFilter) GetExtRuleType() string {
	if x != nil {
		return x.ExtRuleType
	}
	return ""
}

func (x *EventRulesFilter) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *EventRulesFilter) GetCustomRules() bool {
	if x != nil {
		return x.CustomRules
	}
	return false
}

type SortOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute string         `protobuf:"bytes,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
	Order     SortOrderEnums `protobuf:"varint,2,opt,name=order,proto3,enum=eventRules.SortOrderEnums" json:"order,omitempty"`
}

func (x *SortOrder) Reset() {
	*x = SortOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortOrder) ProtoMessage() {}

func (x *SortOrder) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortOrder.ProtoReflect.Descriptor instead.
func (*SortOrder) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{6}
}

func (x *SortOrder) GetAttribute() string {
	if x != nil {
		return x.Attribute
	}
	return ""
}

func (x *SortOrder) GetOrder() SortOrderEnums {
	if x != nil {
		return x.Order
	}
	return SortOrderEnums_UNKNOWN
}

type EventRulesQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint64            `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Count  uint64            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Filter *EventRulesFilter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Sort   *SortOrder        `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *EventRulesQueryRequest) Reset() {
	*x = EventRulesQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRulesQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRulesQueryRequest) ProtoMessage() {}

func (x *EventRulesQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRulesQueryRequest.ProtoReflect.Descriptor instead.
func (*EventRulesQueryRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{7}
}

func (x *EventRulesQueryRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *EventRulesQueryRequest) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EventRulesQueryRequest) GetFilter() *EventRulesFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *EventRulesQueryRequest) GetSort() *SortOrder {
	if x != nil {
		return x.Sort
	}
	return nil
}

type EventRulesGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupNames []string `protobuf:"bytes,1,rep,name=groupNames,proto3" json:"groupNames,omitempty"`
}

func (x *EventRulesGroupResponse) Reset() {
	*x = EventRulesGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRulesGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRulesGroupResponse) ProtoMessage() {}

func (x *EventRulesGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRulesGroupResponse.ProtoReflect.Descriptor instead.
func (*EventRulesGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{8}
}

func (x *EventRulesGroupResponse) GetGroupNames() []string {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

type GetEventRuleByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetEventRuleByNameRequest) Reset() {
	*x = GetEventRuleByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventRuleByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventRuleByNameRequest) ProtoMessage() {}

func (x *GetEventRuleByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventRuleByNameRequest.ProtoReflect.Descriptor instead.
func (*GetEventRuleByNameRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{9}
}

func (x *GetEventRuleByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProcessEventRuleByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ProcessEventRuleByNameRequest) Reset() {
	*x = ProcessEventRuleByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessEventRuleByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEventRuleByNameRequest) ProtoMessage() {}

func (x *ProcessEventRuleByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEventRuleByNameRequest.ProtoReflect.Descriptor instead.
func (*ProcessEventRuleByNameRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{10}
}

func (x *ProcessEventRuleByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EventRuleGroupActiveConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName,omitempty"`
	Active    int32  `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"` // used as boolean 0 to inactive and 1 to active
}

func (x *EventRuleGroupActiveConfig) Reset() {
	*x = EventRuleGroupActiveConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRuleGroupActiveConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleGroupActiveConfig) ProtoMessage() {}

func (x *EventRuleGroupActiveConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleGroupActiveConfig.ProtoReflect.Descriptor instead.
func (*EventRuleGroupActiveConfig) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{11}
}

func (x *EventRuleGroupActiveConfig) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *EventRuleGroupActiveConfig) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

type TestEventRulePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleType  string            `protobuf:"bytes,1,opt,name=ruleType,proto3" json:"ruleType,omitempty"`
	Condition string            `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	Params    map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TestEventRulePayload) Reset() {
	*x = TestEventRulePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestEventRulePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestEventRulePayload) ProtoMessage() {}

func (x *TestEventRulePayload) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestEventRulePayload.ProtoReflect.Descriptor instead.
func (*TestEventRulePayload) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{12}
}

func (x *TestEventRulePayload) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *TestEventRulePayload) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *TestEventRulePayload) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type TestEventRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TestEventRuleResponse) Reset() {
	*x = TestEventRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestEventRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestEventRuleResponse) ProtoMessage() {}

func (x *TestEventRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestEventRuleResponse.ProtoReflect.Descriptor instead.
func (*TestEventRuleResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{13}
}

func (x *TestEventRuleResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type Sequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Sequence) Reset() {
	*x = Sequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sequence) ProtoMessage() {}

func (x *Sequence) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sequence.ProtoReflect.Descriptor instead.
func (*Sequence) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{14}
}

func (x *Sequence) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type EventRuleExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EventRuleExistsRequest) Reset() {
	*x = EventRuleExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRuleExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleExistsRequest) ProtoMessage() {}

func (x *EventRuleExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleExistsRequest.ProtoReflect.Descriptor instead.
func (*EventRuleExistsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{15}
}

func (x *EventRuleExistsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EventRuleExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *EventRuleExistsResponse) Reset() {
	*x = EventRuleExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRuleExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleExistsResponse) ProtoMessage() {}

func (x *EventRuleExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleExistsResponse.ProtoReflect.Descriptor instead.
func (*EventRuleExistsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{16}
}

func (x *EventRuleExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type EventSequenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence *Sequence `protobuf:"bytes,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *EventSequenceResponse) Reset() {
	*x = EventSequenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSequenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSequenceResponse) ProtoMessage() {}

func (x *EventSequenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSequenceResponse.ProtoReflect.Descriptor instead.
func (*EventSequenceResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{17}
}

func (x *EventSequenceResponse) GetSequence() *Sequence {
	if x != nil {
		return x.Sequence
	}
	return nil
}

type CheckDuplicateConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string condition = 1;
	RuleObject map[string]string `protobuf:"bytes,2,rep,name=rule_object,json=ruleObject,proto3" json:"rule_object,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CheckDuplicateConditionRequest) Reset() {
	*x = CheckDuplicateConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDuplicateConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDuplicateConditionRequest) ProtoMessage() {}

func (x *CheckDuplicateConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDuplicateConditionRequest.ProtoReflect.Descriptor instead.
func (*CheckDuplicateConditionRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{18}
}

func (x *CheckDuplicateConditionRequest) GetRuleObject() map[string]string {
	if x != nil {
		return x.RuleObject
	}
	return nil
}

type CheckDuplicateConditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool   `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	Hash   string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CheckDuplicateConditionResponse) Reset() {
	*x = CheckDuplicateConditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDuplicateConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDuplicateConditionResponse) ProtoMessage() {}

func (x *CheckDuplicateConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDuplicateConditionResponse.ProtoReflect.Descriptor instead.
func (*CheckDuplicateConditionResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{19}
}

func (x *CheckDuplicateConditionResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *CheckDuplicateConditionResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *CheckDuplicateConditionResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_api_proto_eventRules_proto protoreflect.FileDescriptor

var file_api_proto_eventRules_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9d, 0x02, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x4c, 0x0a, 0x0c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0xd2, 0x05, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4f, 0x6e,
	0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x22, 0x30, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xbe, 0x02, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x39, 0x0a, 0x17, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x1a,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x22, 0xd1, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x2c, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x31, 0x0a, 0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x22, 0x49, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xbc, 0x01,
	0x0a, 0x1e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5b, 0x0a, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x3d, 0x0a,
	0x0f, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x1f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a,
	0x3e, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x4e, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x41, 0x55, 0x47,
	0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x03, 0x2a,
	0x30, 0x0a, 0x0e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10,
	0x02, 0x32, 0xd4, 0x0f, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x92, 0x41, 0x23,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x15, 0x47, 0x65,
	0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0xc9, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x26, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x24, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5f, 0x92, 0x41, 0x3f,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x31, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x94, 0x01, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x22,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3f, 0x92, 0x41, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x1a, 0x0f, 0x47, 0x65, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x24,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x3b, 0x92, 0x41, 0x1f, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01,
	0x2a, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x92, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x24, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x42, 0x92, 0x41, 0x1f, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x1a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x1a,
	0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x95, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3f, 0x92,
	0x41, 0x1f, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x75, 0x6c,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x90,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x22, 0x3c, 0x92, 0x41, 0x1c, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x1a, 0x0e, 0x47, 0x65, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20,
	0x72, 0x75, 0x6c, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0xaa, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x92, 0x41, 0x35, 0x0a, 0x0d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x54, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0xf4,
	0x01, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x92, 0x01, 0x92, 0x41, 0x6b, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x1a, 0x5d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x2c, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x69, 0x66, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x6e, 0x27, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xd4, 0x01, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x92, 0x41, 0x32,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x24, 0x54, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0xf9, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa4, 0x01, 0x92, 0x41, 0x7d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x1a, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x65,
	0x6e, 0x73, 0x75, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x42, 0xe6, 0x01, 0x92, 0x41, 0xa4, 0x01, 0x12,
	0x11, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x32, 0x03, 0x31,
	0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x19, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x17, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x10, 0x0a, 0x0e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x33,
	0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2c, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x2e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x41, 0x70, 0x69, 0x63, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x63,
	0x61, 0x63, 0x74, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_eventRules_proto_rawDescOnce sync.Once
	file_api_proto_eventRules_proto_rawDescData = file_api_proto_eventRules_proto_rawDesc
)

func file_api_proto_eventRules_proto_rawDescGZIP() []byte {
	file_api_proto_eventRules_proto_rawDescOnce.Do(func() {
		file_api_proto_eventRules_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_eventRules_proto_rawDescData)
	})
	return file_api_proto_eventRules_proto_rawDescData
}

var file_api_proto_eventRules_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_proto_eventRules_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_api_proto_eventRules_proto_goTypes = []interface{}{
	(MetricType)(0),                         // 0: eventRules.MetricType
	(SortOrderEnums)(0),                     // 1: eventRules.SortOrderEnums
	(*EventMetric)(nil),                     // 2: eventRules.EventMetric
	(*PatternLabel)(nil),                    // 3: eventRules.PatternLabel
	(*EventRule)(nil),                       // 4: eventRules.EventRule
	(*EventRulesResponse)(nil),              // 5: eventRules.EventRulesResponse
	(*EventRulesResponseResult)(nil),        // 6: eventRules.EventRulesResponseResult
	(*EventRulesFilter)(nil),                // 7: eventRules.EventRulesFilter
	(*SortOrder)(nil),                       // 8: eventRules.SortOrder
	(*EventRulesQueryRequest)(nil),          // 9: eventRules.EventRulesQueryRequest
	(*EventRulesGroupResponse)(nil),         // 10: eventRules.EventRulesGroupResponse
	(*GetEventRuleByNameRequest)(nil),       // 11: eventRules.GetEventRuleByNameRequest
	(*ProcessEventRuleByNameRequest)(nil),   // 12: eventRules.ProcessEventRuleByNameRequest
	(*EventRuleGroupActiveConfig)(nil),      // 13: eventRules.EventRuleGroupActiveConfig
	(*TestEventRulePayload)(nil),            // 14: eventRules.TestEventRulePayload
	(*TestEventRuleResponse)(nil),           // 15: eventRules.TestEventRuleResponse
	(*Sequence)(nil),                        // 16: eventRules.Sequence
	(*EventRuleExistsRequest)(nil),          // 17: eventRules.EventRuleExistsRequest
	(*EventRuleExistsResponse)(nil),         // 18: eventRules.EventRuleExistsResponse
	(*EventSequenceResponse)(nil),           // 19: eventRules.EventSequenceResponse
	(*CheckDuplicateConditionRequest)(nil),  // 20: eventRules.CheckDuplicateConditionRequest
	(*CheckDuplicateConditionResponse)(nil), // 21: eventRules.CheckDuplicateConditionResponse
	nil,                                     // 22: eventRules.TestEventRulePayload.ParamsEntry
	nil,                                     // 23: eventRules.CheckDuplicateConditionRequest.RuleObjectEntry
	(*empty.Empty)(nil),                     // 24: google.protobuf.Empty
}
var file_api_proto_eventRules_proto_depIdxs = []int32{
	0,  // 0: eventRules.EventMetric.type:type_name -> eventRules.MetricType
	3,  // 1: eventRules.EventMetric.patternLabel:type_name -> eventRules.PatternLabel
	2,  // 2: eventRules.EventRule.eventMetrics:type_name -> eventRules.EventMetric
	3,  // 3: eventRules.EventRule.patternLabels:type_name -> eventRules.PatternLabel
	4,  // 4: eventRules.EventRulesResponse.eventRules:type_name -> eventRules.EventRule
	1,  // 5: eventRules.SortOrder.order:type_name -> eventRules.SortOrderEnums
	7,  // 6: eventRules.EventRulesQueryRequest.filter:type_name -> eventRules.EventRulesFilter
	8,  // 7: eventRules.EventRulesQueryRequest.sort:type_name -> eventRules.SortOrder
	22, // 8: eventRules.TestEventRulePayload.params:type_name -> eventRules.TestEventRulePayload.ParamsEntry
	16, // 9: eventRules.EventSequenceResponse.sequence:type_name -> eventRules.Sequence
	23, // 10: eventRules.CheckDuplicateConditionRequest.rule_object:type_name -> eventRules.CheckDuplicateConditionRequest.RuleObjectEntry
	24, // 11: eventRules.EventRulesService.GetEventRuleGroups:input_type -> google.protobuf.Empty
	13, // 12: eventRules.EventRulesService.SetEventRuleGroupsActive:input_type -> eventRules.EventRuleGroupActiveConfig
	9,  // 13: eventRules.EventRulesService.GetEventRules:input_type -> eventRules.EventRulesQueryRequest
	4,  // 14: eventRules.EventRulesService.CreateEventRule:input_type -> eventRules.EventRule
	4,  // 15: eventRules.EventRulesService.UpdateEventRule:input_type -> eventRules.EventRule
	12, // 16: eventRules.EventRulesService.DeleteEventRule:input_type -> eventRules.ProcessEventRuleByNameRequest
	11, // 17: eventRules.EventRulesService.GetEventRuleByName:input_type -> eventRules.GetEventRuleByNameRequest
	14, // 18: eventRules.EventRulesService.TestEventRule:input_type -> eventRules.TestEventRulePayload
	17, // 19: eventRules.EventRulesService.CheckEventRuleExists:input_type -> eventRules.EventRuleExistsRequest
	20, // 20: eventRules.EventRulesService.ValidateRuleForDuplicate:input_type -> eventRules.CheckDuplicateConditionRequest
	24, // 21: eventRules.EventRulesService.GenerateEventSequence:input_type -> google.protobuf.Empty
	10, // 22: eventRules.EventRulesService.GetEventRuleGroups:output_type -> eventRules.EventRulesGroupResponse
	6,  // 23: eventRules.EventRulesService.SetEventRuleGroupsActive:output_type -> eventRules.EventRulesResponseResult
	5,  // 24: eventRules.EventRulesService.GetEventRules:output_type -> eventRules.EventRulesResponse
	6,  // 25: eventRules.EventRulesService.CreateEventRule:output_type -> eventRules.EventRulesResponseResult
	6,  // 26: eventRules.EventRulesService.UpdateEventRule:output_type -> eventRules.EventRulesResponseResult
	24, // 27: eventRules.EventRulesService.DeleteEventRule:output_type -> google.protobuf.Empty
	4,  // 28: eventRules.EventRulesService.GetEventRuleByName:output_type -> eventRules.EventRule
	15, // 29: eventRules.EventRulesService.TestEventRule:output_type -> eventRules.TestEventRuleResponse
	18, // 30: eventRules.EventRulesService.CheckEventRuleExists:output_type -> eventRules.EventRuleExistsResponse
	21, // 31: eventRules.EventRulesService.ValidateRuleForDuplicate:output_type -> eventRules.CheckDuplicateConditionResponse
	19, // 32: eventRules.EventRulesService.GenerateEventSequence:output_type -> eventRules.EventSequenceResponse
	22, // [22:33] is the sub-list for method output_type
	11, // [11:22] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_api_proto_eventRules_proto_init() }
func file_api_proto_eventRules_proto_init() {
	if File_api_proto_eventRules_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_eventRules_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRulesResponseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRulesFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRulesQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRulesGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventRuleByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessEventRuleByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRuleGroupActiveConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestEventRulePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestEventRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRuleExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRuleExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSequenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDuplicateConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDuplicateConditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_eventRules_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_eventRules_proto_goTypes,
		DependencyIndexes: file_api_proto_eventRules_proto_depIdxs,
		EnumInfos:         file_api_proto_eventRules_proto_enumTypes,
		MessageInfos:      file_api_proto_eventRules_proto_msgTypes,
	}.Build()
	File_api_proto_eventRules_proto = out.File
	file_api_proto_eventRules_proto_rawDesc = nil
	file_api_proto_eventRules_proto_goTypes = nil
	file_api_proto_eventRules_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventRulesServiceClient is the client API for EventRulesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventRulesServiceClient interface {
	GetEventRuleGroups(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EventRulesGroupResponse, error)
	SetEventRuleGroupsActive(ctx context.Context, in *EventRuleGroupActiveConfig, opts ...grpc.CallOption) (*EventRulesResponseResult, error)
	GetEventRules(ctx context.Context, in *EventRulesQueryRequest, opts ...grpc.CallOption) (*EventRulesResponse, error)
	CreateEventRule(ctx context.Context, in *EventRule, opts ...grpc.CallOption) (*EventRulesResponseResult, error)
	UpdateEventRule(ctx context.Context, in *EventRule, opts ...grpc.CallOption) (*EventRulesResponseResult, error)
	DeleteEventRule(ctx context.Context, in *ProcessEventRuleByNameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetEventRuleByName(ctx context.Context, in *GetEventRuleByNameRequest, opts ...grpc.CallOption) (*EventRule, error)
	TestEventRule(ctx context.Context, in *TestEventRulePayload, opts ...grpc.CallOption) (*TestEventRuleResponse, error)
	CheckEventRuleExists(ctx context.Context, in *EventRuleExistsRequest, opts ...grpc.CallOption) (*EventRuleExistsResponse, error)
	ValidateRuleForDuplicate(ctx context.Context, in *CheckDuplicateConditionRequest, opts ...grpc.CallOption) (*CheckDuplicateConditionResponse, error)
	GenerateEventSequence(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EventSequenceResponse, error)
}

type eventRulesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventRulesServiceClient(cc grpc.ClientConnInterface) EventRulesServiceClient {
	return &eventRulesServiceClient{cc}
}

func (c *eventRulesServiceClient) GetEventRuleGroups(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EventRulesGroupResponse, error) {
	out := new(EventRulesGroupResponse)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/GetEventRuleGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRulesServiceClient) SetEventRuleGroupsActive(ctx context.Context, in *EventRuleGroupActiveConfig, opts ...grpc.CallOption) (*EventRulesResponseResult, error) {
	out := new(EventRulesResponseResult)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/SetEventRuleGroupsActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRulesServiceClient) GetEventRules(ctx context.Context, in *EventRulesQueryRequest, opts ...grpc.CallOption) (*EventRulesResponse, error) {
	out := new(EventRulesResponse)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/GetEventRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRulesServiceClient) CreateEventRule(ctx context.Context, in *EventRule, opts ...grpc.CallOption) (*EventRulesResponseResult, error) {
	out := new(EventRulesResponseResult)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/CreateEventRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRulesServiceClient) UpdateEventRule(ctx context.Context, in *EventRule, opts ...grpc.CallOption) (*EventRulesResponseResult, error) {
	out := new(EventRulesResponseResult)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/UpdateEventRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRulesServiceClient) DeleteEventRule(ctx context.Context, in *ProcessEventRuleByNameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/DeleteEventRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRulesServiceClient) GetEventRuleByName(ctx context.Context, in *GetEventRuleByNameRequest, opts ...grpc.CallOption) (*EventRule, error) {
	out := new(EventRule)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/GetEventRuleByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRulesServiceClient) TestEventRule(ctx context.Context, in *TestEventRulePayload, opts ...grpc.CallOption) (*TestEventRuleResponse, error) {
	out := new(TestEventRuleResponse)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/TestEventRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRulesServiceClient) CheckEventRuleExists(ctx context.Context, in *EventRuleExistsRequest, opts ...grpc.CallOption) (*EventRuleExistsResponse, error) {
	out := new(EventRuleExistsResponse)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/CheckEventRuleExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRulesServiceClient) ValidateRuleForDuplicate(ctx context.Context, in *CheckDuplicateConditionRequest, opts ...grpc.CallOption) (*CheckDuplicateConditionResponse, error) {
	out := new(CheckDuplicateConditionResponse)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/ValidateRuleForDuplicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRulesServiceClient) GenerateEventSequence(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EventSequenceResponse, error) {
	out := new(EventSequenceResponse)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/GenerateEventSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventRulesServiceServer is the server API for EventRulesService service.
type EventRulesServiceServer interface {
	GetEventRuleGroups(context.Context, *empty.Empty) (*EventRulesGroupResponse, error)
	SetEventRuleGroupsActive(context.Context, *EventRuleGroupActiveConfig) (*EventRulesResponseResult, error)
	GetEventRules(context.Context, *EventRulesQueryRequest) (*EventRulesResponse, error)
	CreateEventRule(context.Context, *EventRule) (*EventRulesResponseResult, error)
	UpdateEventRule(context.Context, *EventRule) (*EventRulesResponseResult, error)
	DeleteEventRule(context.Context, *ProcessEventRuleByNameRequest) (*empty.Empty, error)
	GetEventRuleByName(context.Context, *GetEventRuleByNameRequest) (*EventRule, error)
	TestEventRule(context.Context, *TestEventRulePayload) (*TestEventRuleResponse, error)
	CheckEventRuleExists(context.Context, *EventRuleExistsRequest) (*EventRuleExistsResponse, error)
	ValidateRuleForDuplicate(context.Context, *CheckDuplicateConditionRequest) (*CheckDuplicateConditionResponse, error)
	GenerateEventSequence(context.Context, *empty.Empty) (*EventSequenceResponse, error)
}

// UnimplementedEventRulesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventRulesServiceServer struct {
}

func (*UnimplementedEventRulesServiceServer) GetEventRuleGroups(context.Context, *empty.Empty) (*EventRulesGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventRuleGroups not implemented")
}
func (*UnimplementedEventRulesServiceServer) SetEventRuleGroupsActive(context.Context, *EventRuleGroupActiveConfig) (*EventRulesResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEventRuleGroupsActive not implemented")
}
func (*UnimplementedEventRulesServiceServer) GetEventRules(context.Context, *EventRulesQueryRequest) (*EventRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventRules not implemented")
}
func (*UnimplementedEventRulesServiceServer) CreateEventRule(context.Context, *EventRule) (*EventRulesResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventRule not implemented")
}
func (*UnimplementedEventRulesServiceServer) UpdateEventRule(context.Context, *EventRule) (*EventRulesResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventRule not implemented")
}
func (*UnimplementedEventRulesServiceServer) DeleteEventRule(context.Context, *ProcessEventRuleByNameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventRule not implemented")
}
func (*UnimplementedEventRulesServiceServer) GetEventRuleByName(context.Context, *GetEventRuleByNameRequest) (*EventRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventRuleByName not implemented")
}
func (*UnimplementedEventRulesServiceServer) TestEventRule(context.Context, *TestEventRulePayload) (*TestEventRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestEventRule not implemented")
}
func (*UnimplementedEventRulesServiceServer) CheckEventRuleExists(context.Context, *EventRuleExistsRequest) (*EventRuleExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEventRuleExists not implemented")
}
func (*UnimplementedEventRulesServiceServer) ValidateRuleForDuplicate(context.Context, *CheckDuplicateConditionRequest) (*CheckDuplicateConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRuleForDuplicate not implemented")
}
func (*UnimplementedEventRulesServiceServer) GenerateEventSequence(context.Context, *empty.Empty) (*EventSequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateEventSequence not implemented")
}

func RegisterEventRulesServiceServer(s *grpc.Server, srv EventRulesServiceServer) {
	s.RegisterService(&_EventRulesService_serviceDesc, srv)
}

func _EventRulesService_GetEventRuleGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).GetEventRuleGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/GetEventRuleGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).GetEventRuleGroups(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRulesService_SetEventRuleGroupsActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRuleGroupActiveConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).SetEventRuleGroupsActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/SetEventRuleGroupsActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).SetEventRuleGroupsActive(ctx, req.(*EventRuleGroupActiveConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRulesService_GetEventRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRulesQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).GetEventRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/GetEventRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).GetEventRules(ctx, req.(*EventRulesQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRulesService_CreateEventRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).CreateEventRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/CreateEventRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).CreateEventRule(ctx, req.(*EventRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRulesService_UpdateEventRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).UpdateEventRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/UpdateEventRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).UpdateEventRule(ctx, req.(*EventRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRulesService_DeleteEventRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessEventRuleByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).DeleteEventRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/DeleteEventRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).DeleteEventRule(ctx, req.(*ProcessEventRuleByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRulesService_GetEventRuleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRuleByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).GetEventRuleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/GetEventRuleByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).GetEventRuleByName(ctx, req.(*GetEventRuleByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRulesService_TestEventRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestEventRulePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).TestEventRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/TestEventRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).TestEventRule(ctx, req.(*TestEventRulePayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRulesService_CheckEventRuleExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRuleExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).CheckEventRuleExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/CheckEventRuleExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).CheckEventRuleExists(ctx, req.(*EventRuleExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRulesService_ValidateRuleForDuplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDuplicateConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).ValidateRuleForDuplicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/ValidateRuleForDuplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).ValidateRuleForDuplicate(ctx, req.(*CheckDuplicateConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRulesService_GenerateEventSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).GenerateEventSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/GenerateEventSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).GenerateEventSequence(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventRulesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eventRules.EventRulesService",
	HandlerType: (*EventRulesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEventRuleGroups",
			Handler:    _EventRulesService_GetEventRuleGroups_Handler,
		},
		{
			MethodName: "SetEventRuleGroupsActive",
			Handler:    _EventRulesService_SetEventRuleGroupsActive_Handler,
		},
		{
			MethodName: "GetEventRules",
			Handler:    _EventRulesService_GetEventRules_Handler,
		},
		{
			MethodName: "CreateEventRule",
			Handler:    _EventRulesService_CreateEventRule_Handler,
		},
		{
			MethodName: "UpdateEventRule",
			Handler:    _EventRulesService_UpdateEventRule_Handler,
		},
		{
			MethodName: "DeleteEventRule",
			Handler:    _EventRulesService_DeleteEventRule_Handler,
		},
		{
			MethodName: "GetEventRuleByName",
			Handler:    _EventRulesService_GetEventRuleByName_Handler,
		},
		{
			MethodName: "TestEventRule",
			Handler:    _EventRulesService_TestEventRule_Handler,
		},
		{
			MethodName: "CheckEventRuleExists",
			Handler:    _EventRulesService_CheckEventRuleExists_Handler,
		},
		{
			MethodName: "ValidateRuleForDuplicate",
			Handler:    _EventRulesService_ValidateRuleForDuplicate_Handler,
		},
		{
			MethodName: "GenerateEventSequence",
			Handler:    _EventRulesService_GenerateEventSequence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/eventRules.proto",
}
