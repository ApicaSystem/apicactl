// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: api/proto/eventRules.proto

package eventRules

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SortOrderEnums int32

const (
	SortOrderEnums_UNKNOWN SortOrderEnums = 0
	SortOrderEnums_ASC     SortOrderEnums = 1
	SortOrderEnums_DESC    SortOrderEnums = 2
)

// Enum value maps for SortOrderEnums.
var (
	SortOrderEnums_name = map[int32]string{
		0: "UNKNOWN",
		1: "ASC",
		2: "DESC",
	}
	SortOrderEnums_value = map[string]int32{
		"UNKNOWN": 0,
		"ASC":     1,
		"DESC":    2,
	}
)

func (x SortOrderEnums) Enum() *SortOrderEnums {
	p := new(SortOrderEnums)
	*p = x
	return p
}

func (x SortOrderEnums) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrderEnums) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_eventRules_proto_enumTypes[0].Descriptor()
}

func (SortOrderEnums) Type() protoreflect.EnumType {
	return &file_api_proto_eventRules_proto_enumTypes[0]
}

func (x SortOrderEnums) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrderEnums.Descriptor instead.
func (SortOrderEnums) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{0}
}

type EventRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Level       string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	Condition   string `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	// map<string,string> extract = 5;
	GroupName        string `protobuf:"bytes,6,opt,name=groupName,proto3" json:"groupName,omitempty"`
	Active           int32  `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`       // used as boolean 0 to inactive and 1 to active
	Immutable        int32  `protobuf:"varint,8,opt,name=immutable,proto3" json:"immutable,omitempty"` // used as boolean 0 for mutable and 1 to immutable
	RuleType         string `protobuf:"bytes,9,opt,name=ruleType,proto3" json:"ruleType,omitempty"`    // possible values {"REGEX", "EVALUATE"} Dectates how to apply rule to logline.
	ApplicationMatch string `protobuf:"bytes,10,opt,name=applicationMatch,proto3" json:"applicationMatch,omitempty"`
}

func (x *EventRule) Reset() {
	*x = EventRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRule) ProtoMessage() {}

func (x *EventRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRule.ProtoReflect.Descriptor instead.
func (*EventRule) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{0}
}

func (x *EventRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EventRule) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *EventRule) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *EventRule) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *EventRule) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *EventRule) GetImmutable() int32 {
	if x != nil {
		return x.Immutable
	}
	return 0
}

func (x *EventRule) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *EventRule) GetApplicationMatch() string {
	if x != nil {
		return x.ApplicationMatch
	}
	return ""
}

type EventRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset     int64        `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Count      int64        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	TotalCount int64        `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	EventRules []*EventRule `protobuf:"bytes,4,rep,name=eventRules,proto3" json:"eventRules,omitempty"`
}

func (x *EventRulesResponse) Reset() {
	*x = EventRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRulesResponse) ProtoMessage() {}

func (x *EventRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRulesResponse.ProtoReflect.Descriptor instead.
func (*EventRulesResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{1}
}

func (x *EventRulesResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *EventRulesResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EventRulesResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *EventRulesResponse) GetEventRules() []*EventRule {
	if x != nil {
		return x.EventRules
	}
	return nil
}

type EventRulesResponseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *EventRulesResponseResult) Reset() {
	*x = EventRulesResponseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRulesResponseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRulesResponseResult) ProtoMessage() {}

func (x *EventRulesResponseResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRulesResponseResult.ProtoReflect.Descriptor instead.
func (*EventRulesResponseResult) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{2}
}

func (x *EventRulesResponseResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type EventRulesFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names      []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	Search     string   `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"`
	Level      []string `protobuf:"bytes,3,rep,name=level,proto3" json:"level,omitempty"`
	GroupNames []string `protobuf:"bytes,4,rep,name=groupNames,proto3" json:"groupNames,omitempty"`
	Active     int32    `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`       // used as boolean 0 to inactive and 1 to active
	Immutable  int32    `protobuf:"varint,6,opt,name=immutable,proto3" json:"immutable,omitempty"` // used as boolean 0 for mutable and 1 to immutable
}

func (x *EventRulesFilter) Reset() {
	*x = EventRulesFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRulesFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRulesFilter) ProtoMessage() {}

func (x *EventRulesFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRulesFilter.ProtoReflect.Descriptor instead.
func (*EventRulesFilter) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{3}
}

func (x *EventRulesFilter) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *EventRulesFilter) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *EventRulesFilter) GetLevel() []string {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *EventRulesFilter) GetGroupNames() []string {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *EventRulesFilter) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *EventRulesFilter) GetImmutable() int32 {
	if x != nil {
		return x.Immutable
	}
	return 0
}

type SortOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute string         `protobuf:"bytes,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
	Order     SortOrderEnums `protobuf:"varint,2,opt,name=order,proto3,enum=eventRules.SortOrderEnums" json:"order,omitempty"`
}

func (x *SortOrder) Reset() {
	*x = SortOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortOrder) ProtoMessage() {}

func (x *SortOrder) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortOrder.ProtoReflect.Descriptor instead.
func (*SortOrder) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{4}
}

func (x *SortOrder) GetAttribute() string {
	if x != nil {
		return x.Attribute
	}
	return ""
}

func (x *SortOrder) GetOrder() SortOrderEnums {
	if x != nil {
		return x.Order
	}
	return SortOrderEnums_UNKNOWN
}

type EventRulesQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint64            `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Count  uint64            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Filter *EventRulesFilter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Sort   *SortOrder        `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *EventRulesQueryRequest) Reset() {
	*x = EventRulesQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRulesQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRulesQueryRequest) ProtoMessage() {}

func (x *EventRulesQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRulesQueryRequest.ProtoReflect.Descriptor instead.
func (*EventRulesQueryRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{5}
}

func (x *EventRulesQueryRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *EventRulesQueryRequest) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EventRulesQueryRequest) GetFilter() *EventRulesFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *EventRulesQueryRequest) GetSort() *SortOrder {
	if x != nil {
		return x.Sort
	}
	return nil
}

type EventRulesGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupNames []string `protobuf:"bytes,1,rep,name=groupNames,proto3" json:"groupNames,omitempty"`
}

func (x *EventRulesGroupResponse) Reset() {
	*x = EventRulesGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRulesGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRulesGroupResponse) ProtoMessage() {}

func (x *EventRulesGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRulesGroupResponse.ProtoReflect.Descriptor instead.
func (*EventRulesGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{6}
}

func (x *EventRulesGroupResponse) GetGroupNames() []string {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

type ProcessEventRuleByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ProcessEventRuleByNameRequest) Reset() {
	*x = ProcessEventRuleByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessEventRuleByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEventRuleByNameRequest) ProtoMessage() {}

func (x *ProcessEventRuleByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEventRuleByNameRequest.ProtoReflect.Descriptor instead.
func (*ProcessEventRuleByNameRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{7}
}

func (x *ProcessEventRuleByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EventRuleGroupActiveConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName,omitempty"`
	Active    int32  `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"` // used as boolean 0 to inactive and 1 to active
}

func (x *EventRuleGroupActiveConfig) Reset() {
	*x = EventRuleGroupActiveConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_eventRules_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRuleGroupActiveConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleGroupActiveConfig) ProtoMessage() {}

func (x *EventRuleGroupActiveConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_eventRules_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleGroupActiveConfig.ProtoReflect.Descriptor instead.
func (*EventRuleGroupActiveConfig) Descriptor() ([]byte, []int) {
	return file_api_proto_eventRules_proto_rawDescGZIP(), []int{8}
}

func (x *EventRuleGroupActiveConfig) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *EventRuleGroupActiveConfig) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

var File_api_proto_eventRules_proto protoreflect.FileDescriptor

var file_api_proto_eventRules_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x91, 0x02, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x30, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x5b, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0xa7, 0x01, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x39, 0x0a, 0x17, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x1a, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2a, 0x30,
	0x0a, 0x0e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x02,
	0x32, 0xca, 0x07, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x92, 0x41, 0x23, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x15, 0x47, 0x65, 0x74, 0x20, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0xc9, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x26, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x24, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x92, 0x41, 0x3f, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x31, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x6c, 0x6c, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x94, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x1a, 0x0f, 0x47, 0x65, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x24, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x1f, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x75, 0x6c, 0x65,
	0x12, 0x92, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x24, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x1a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1f, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x1a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x20, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x1f, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x42, 0xe2, 0x01,
	0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x71, 0x61, 0x69, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x71, 0x63, 0x74, 0x6c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x3b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x92, 0x41, 0xa4, 0x01, 0x12, 0x11,
	0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x32, 0x03, 0x31, 0x2e,
	0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x17, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x10, 0x0a, 0x0e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x33, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x2c, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_eventRules_proto_rawDescOnce sync.Once
	file_api_proto_eventRules_proto_rawDescData = file_api_proto_eventRules_proto_rawDesc
)

func file_api_proto_eventRules_proto_rawDescGZIP() []byte {
	file_api_proto_eventRules_proto_rawDescOnce.Do(func() {
		file_api_proto_eventRules_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_eventRules_proto_rawDescData)
	})
	return file_api_proto_eventRules_proto_rawDescData
}

var file_api_proto_eventRules_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_proto_eventRules_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_api_proto_eventRules_proto_goTypes = []interface{}{
	(SortOrderEnums)(0),                   // 0: eventRules.SortOrderEnums
	(*EventRule)(nil),                     // 1: eventRules.EventRule
	(*EventRulesResponse)(nil),            // 2: eventRules.EventRulesResponse
	(*EventRulesResponseResult)(nil),      // 3: eventRules.EventRulesResponseResult
	(*EventRulesFilter)(nil),              // 4: eventRules.EventRulesFilter
	(*SortOrder)(nil),                     // 5: eventRules.SortOrder
	(*EventRulesQueryRequest)(nil),        // 6: eventRules.EventRulesQueryRequest
	(*EventRulesGroupResponse)(nil),       // 7: eventRules.EventRulesGroupResponse
	(*ProcessEventRuleByNameRequest)(nil), // 8: eventRules.ProcessEventRuleByNameRequest
	(*EventRuleGroupActiveConfig)(nil),    // 9: eventRules.EventRuleGroupActiveConfig
	(*empty.Empty)(nil),                   // 10: google.protobuf.Empty
}
var file_api_proto_eventRules_proto_depIdxs = []int32{
	1,  // 0: eventRules.EventRulesResponse.eventRules:type_name -> eventRules.EventRule
	0,  // 1: eventRules.SortOrder.order:type_name -> eventRules.SortOrderEnums
	4,  // 2: eventRules.EventRulesQueryRequest.filter:type_name -> eventRules.EventRulesFilter
	5,  // 3: eventRules.EventRulesQueryRequest.sort:type_name -> eventRules.SortOrder
	10, // 4: eventRules.EventRulesService.GetEventRuleGroups:input_type -> google.protobuf.Empty
	9,  // 5: eventRules.EventRulesService.SetEventRuleGroupsActive:input_type -> eventRules.EventRuleGroupActiveConfig
	6,  // 6: eventRules.EventRulesService.GetEventRules:input_type -> eventRules.EventRulesQueryRequest
	1,  // 7: eventRules.EventRulesService.CreateEventRule:input_type -> eventRules.EventRule
	1,  // 8: eventRules.EventRulesService.UpdateEventRule:input_type -> eventRules.EventRule
	8,  // 9: eventRules.EventRulesService.DeleteEventRule:input_type -> eventRules.ProcessEventRuleByNameRequest
	7,  // 10: eventRules.EventRulesService.GetEventRuleGroups:output_type -> eventRules.EventRulesGroupResponse
	3,  // 11: eventRules.EventRulesService.SetEventRuleGroupsActive:output_type -> eventRules.EventRulesResponseResult
	2,  // 12: eventRules.EventRulesService.GetEventRules:output_type -> eventRules.EventRulesResponse
	3,  // 13: eventRules.EventRulesService.CreateEventRule:output_type -> eventRules.EventRulesResponseResult
	3,  // 14: eventRules.EventRulesService.UpdateEventRule:output_type -> eventRules.EventRulesResponseResult
	10, // 15: eventRules.EventRulesService.DeleteEventRule:output_type -> google.protobuf.Empty
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_api_proto_eventRules_proto_init() }
func file_api_proto_eventRules_proto_init() {
	if File_api_proto_eventRules_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_eventRules_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRulesResponseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRulesFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRulesQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRulesGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessEventRuleByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_eventRules_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRuleGroupActiveConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_eventRules_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_eventRules_proto_goTypes,
		DependencyIndexes: file_api_proto_eventRules_proto_depIdxs,
		EnumInfos:         file_api_proto_eventRules_proto_enumTypes,
		MessageInfos:      file_api_proto_eventRules_proto_msgTypes,
	}.Build()
	File_api_proto_eventRules_proto = out.File
	file_api_proto_eventRules_proto_rawDesc = nil
	file_api_proto_eventRules_proto_goTypes = nil
	file_api_proto_eventRules_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventRulesServiceClient is the client API for EventRulesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventRulesServiceClient interface {
	GetEventRuleGroups(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EventRulesGroupResponse, error)
	SetEventRuleGroupsActive(ctx context.Context, in *EventRuleGroupActiveConfig, opts ...grpc.CallOption) (*EventRulesResponseResult, error)
	GetEventRules(ctx context.Context, in *EventRulesQueryRequest, opts ...grpc.CallOption) (*EventRulesResponse, error)
	CreateEventRule(ctx context.Context, in *EventRule, opts ...grpc.CallOption) (*EventRulesResponseResult, error)
	UpdateEventRule(ctx context.Context, in *EventRule, opts ...grpc.CallOption) (*EventRulesResponseResult, error)
	DeleteEventRule(ctx context.Context, in *ProcessEventRuleByNameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type eventRulesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventRulesServiceClient(cc grpc.ClientConnInterface) EventRulesServiceClient {
	return &eventRulesServiceClient{cc}
}

func (c *eventRulesServiceClient) GetEventRuleGroups(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EventRulesGroupResponse, error) {
	out := new(EventRulesGroupResponse)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/GetEventRuleGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRulesServiceClient) SetEventRuleGroupsActive(ctx context.Context, in *EventRuleGroupActiveConfig, opts ...grpc.CallOption) (*EventRulesResponseResult, error) {
	out := new(EventRulesResponseResult)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/SetEventRuleGroupsActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRulesServiceClient) GetEventRules(ctx context.Context, in *EventRulesQueryRequest, opts ...grpc.CallOption) (*EventRulesResponse, error) {
	out := new(EventRulesResponse)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/GetEventRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRulesServiceClient) CreateEventRule(ctx context.Context, in *EventRule, opts ...grpc.CallOption) (*EventRulesResponseResult, error) {
	out := new(EventRulesResponseResult)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/CreateEventRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRulesServiceClient) UpdateEventRule(ctx context.Context, in *EventRule, opts ...grpc.CallOption) (*EventRulesResponseResult, error) {
	out := new(EventRulesResponseResult)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/UpdateEventRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRulesServiceClient) DeleteEventRule(ctx context.Context, in *ProcessEventRuleByNameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/eventRules.EventRulesService/DeleteEventRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventRulesServiceServer is the server API for EventRulesService service.
type EventRulesServiceServer interface {
	GetEventRuleGroups(context.Context, *empty.Empty) (*EventRulesGroupResponse, error)
	SetEventRuleGroupsActive(context.Context, *EventRuleGroupActiveConfig) (*EventRulesResponseResult, error)
	GetEventRules(context.Context, *EventRulesQueryRequest) (*EventRulesResponse, error)
	CreateEventRule(context.Context, *EventRule) (*EventRulesResponseResult, error)
	UpdateEventRule(context.Context, *EventRule) (*EventRulesResponseResult, error)
	DeleteEventRule(context.Context, *ProcessEventRuleByNameRequest) (*empty.Empty, error)
}

// UnimplementedEventRulesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventRulesServiceServer struct {
}

func (*UnimplementedEventRulesServiceServer) GetEventRuleGroups(context.Context, *empty.Empty) (*EventRulesGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventRuleGroups not implemented")
}
func (*UnimplementedEventRulesServiceServer) SetEventRuleGroupsActive(context.Context, *EventRuleGroupActiveConfig) (*EventRulesResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEventRuleGroupsActive not implemented")
}
func (*UnimplementedEventRulesServiceServer) GetEventRules(context.Context, *EventRulesQueryRequest) (*EventRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventRules not implemented")
}
func (*UnimplementedEventRulesServiceServer) CreateEventRule(context.Context, *EventRule) (*EventRulesResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventRule not implemented")
}
func (*UnimplementedEventRulesServiceServer) UpdateEventRule(context.Context, *EventRule) (*EventRulesResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventRule not implemented")
}
func (*UnimplementedEventRulesServiceServer) DeleteEventRule(context.Context, *ProcessEventRuleByNameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventRule not implemented")
}

func RegisterEventRulesServiceServer(s *grpc.Server, srv EventRulesServiceServer) {
	s.RegisterService(&_EventRulesService_serviceDesc, srv)
}

func _EventRulesService_GetEventRuleGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).GetEventRuleGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/GetEventRuleGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).GetEventRuleGroups(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRulesService_SetEventRuleGroupsActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRuleGroupActiveConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).SetEventRuleGroupsActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/SetEventRuleGroupsActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).SetEventRuleGroupsActive(ctx, req.(*EventRuleGroupActiveConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRulesService_GetEventRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRulesQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).GetEventRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/GetEventRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).GetEventRules(ctx, req.(*EventRulesQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRulesService_CreateEventRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).CreateEventRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/CreateEventRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).CreateEventRule(ctx, req.(*EventRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRulesService_UpdateEventRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).UpdateEventRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/UpdateEventRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).UpdateEventRule(ctx, req.(*EventRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRulesService_DeleteEventRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessEventRuleByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRulesServiceServer).DeleteEventRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventRules.EventRulesService/DeleteEventRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRulesServiceServer).DeleteEventRule(ctx, req.(*ProcessEventRuleByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventRulesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eventRules.EventRulesService",
	HandlerType: (*EventRulesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEventRuleGroups",
			Handler:    _EventRulesService_GetEventRuleGroups_Handler,
		},
		{
			MethodName: "SetEventRuleGroupsActive",
			Handler:    _EventRulesService_SetEventRuleGroupsActive_Handler,
		},
		{
			MethodName: "GetEventRules",
			Handler:    _EventRulesService_GetEventRules_Handler,
		},
		{
			MethodName: "CreateEventRule",
			Handler:    _EventRulesService_CreateEventRule_Handler,
		},
		{
			MethodName: "UpdateEventRule",
			Handler:    _EventRulesService_UpdateEventRule_Handler,
		},
		{
			MethodName: "DeleteEventRule",
			Handler:    _EventRulesService_DeleteEventRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/eventRules.proto",
}
