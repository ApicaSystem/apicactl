syntax = "proto3";

package query;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/logiqai/logiqctl/api/v1/query;query";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info : {
        title : "Query";
version:"1.0";
};


schemes:HTTP;
schemes:HTTPS;
consumes:"application/json";
produces:"application/json";

responses:{
key:"400";
value:{
description:"Invalid Request."
}
}
responses:{
key:"403";
value:{
description:"Token Expired."
}
}
responses:{
key:"404";
value:{
description:"Returned when the resource does not exist."
}
}
};

enum OrderBy {
    ASC = 0;
    DESC = 1;
}

enum QueryType {
    Search = 0;
    Fetch = 1;
    AdvanceSearch = 2;
    Report = 3;
}

message StructuredDataValues {
    repeated string values = 1;
}

message SysLogMessage {
    string AppName = 2;
    string Facility = 3;
    string FacilityString = 4;
    string Hostname = 5;
    string Message = 6;
    string MsgID = 7;
    string Priority = 9;
    string ProcID = 10;
    string Sender = 11;
    string Severity = 12;
    string SeverityString = 13;
    repeated Facet StructuredData = 14;
    string Tag = 15;
    string Timestamp = 16;
    string Namespace = 17;
    string Event = 18;
    string EventId = 19;
    int64 MsTimestamp = 20;
    int64 STimestamp = 21;
}

message Facet {
    string key = 1;
    repeated string values = 2;
}

message Pattern {
    string patternId = 1;
    int64 ts  = 2;
    string msgId = 3;
}


message GetPatternResponse {
    repeated Pattern data = 1;
    int64 minTs = 2;
    int64 maxTs = 3;
}


message GetMessagesRequest {
    string queryId = 1;
    repeated string msgIds = 2;
}


message GetMessagesResponse {
    repeated SysLogMessage data = 1;
}


message FilterValues {
    repeated string values = 1;
}

message FacetValues {
    repeated string values = 1;
}

message QueryProperties {
    repeated string applicationNames = 1;
    map<string, FilterValues> filters = 2;
    string namespace = 3;
    OrderBy order = 4;
    uint32 pageSize = 6;
    string startTime = 7;
    string endTime = 8;
    string keyWord = 9;
    string destination = 10;
    bool facets = 11;
    QueryType qType = 12;
    bool patterns = 13;
    bool isAdvanceQuery = 14;
    string reportDefinition = 15;
}

message GetQueryByIdResponse {
    string namespace = 1;
    repeated string applicationNames = 2;
    int64 startTime = 3;
    int64 endTime = 4;
    string keyWord = 5;
    bool isAdvanceQuery = 6;
}

message GetDataRequest {
    string queryId = 1;
    repeated Facet facets = 2;
}

message GetPatternsRequest {
    string queryId = 1;
    OrderBy order = 2;
}

message Progress {
    string value = 1;
    string outOf = 2;
    string type = 3;
}

message GetDataResponse {
    repeated SysLogMessage data = 1;
    string Status = 2;
    int32 remaining = 3;
    repeated Facet facets = 4;
    Progress percent = 6;
    Progress size = 7;
    int32 responsePageSize = 8;
    repeated Patterns patterns = 9;
}

message Patterns {
    string patternId = 1;
    int64 count = 2;
    string desc = 3;
}

message ReportGroupBy {
    string Label = 1;
    string value = 2;
}

message GetReportResponse {
    string queryId = 1;
    string status = 2;
    repeated ReportResult results = 3;
    Progress percent = 4;
    Progress size = 5;
    string url = 6;
}

message ReportResult {
    string timeStamp = 1;
    string value = 2;
    repeated ReportGroupBy groupBy = 3;
}

message GetReportRequest {
    string queryId = 1;
}

message SharedQueryRequest {
    repeated string QueryIds = 1;
}

message CancelQueryRequest {
    string queryId = 1;
}

message QueryInfo {
    string Key = 1;
    string message = 2;
}

message QueryErrors {
    string Key = 1;
    string message = 2;
}

message GetQueryResponse {
    string queryId = 1;
    repeated QueryInfo info = 3;
    repeated QueryErrors errors = 4;
    map<string, string> meta = 5;
    string details = 6;
}

service QueryService {
    rpc Query (QueryProperties) returns (GetQueryResponse) {
        option (google.api.http) = {
            post : "/v1/query",
            body : "*",
        };
    };

    rpc GetDataNext (GetDataRequest) returns (GetDataResponse) {
        option (google.api.http) = {
            get : "/v1/data/{queryId}/next",
        };
    };

    rpc GetDataPrevious (GetDataRequest) returns (GetDataResponse) {
        option (google.api.http) = {
            get : "/v1/data/{queryId}/previous",
        };
    };

    rpc PostDataNext (GetDataRequest) returns (GetDataResponse) {
        option (google.api.http) = {
            post : "/v1/data/{queryId}/next",
            body : "*",
        };
    };

    rpc PostDataPrevious (GetDataRequest) returns (GetDataResponse) {
        option (google.api.http) = {
            post : "/v1/data/{queryId}/previous",
            body : "*",
        };
    };

    rpc GetPatternData (GetPatternsRequest) returns (GetPatternResponse) {
        option (google.api.http) = {
            post : "/v1/data/{queryId}/patterns",
            body : "*",
        };
    };

    rpc PostMessagesById (GetMessagesRequest) returns (GetMessagesResponse) {
        option (google.api.http) = {
            post : "/v1/data/{queryId}/messages",
            body : "*",
        };
    };

    rpc GetReportResult (GetReportRequest) returns (GetReportResponse) {
        option (google.api.http) = {
            get : "/v1/data/report/{queryId}",
        };
    };

    rpc CancelQuery (CancelQueryRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete : "/v1/data/{queryId}",
        };
    };

    rpc GetSharedQueryDetailsById (SharedQueryRequest) returns (GetQueryByIdResponse) {
         option (google.api.http) = {
            post : "/v1/query/shared",
            body : "*",
        };
    };

    rpc ShareQuery (SharedQueryRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post : "/v1/query/set-shared",
            body : "*",
        };
    };
}
