syntax = "proto3";

package processdetails;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option go_package = "github.com/logiqai/logiqctl/api/v1/processes;processes";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info : {
        title : "Processes";
version
:
"1.0"
;
}
;

schemes
:
HTTP
;
schemes
:
HTTPS
;
consumes
:
"application/json"
;
produces
:
"application/json"
;

responses
:
{
key
:
"400"
;
value
:
{
description
:
"Invalid Request."
}
}
responses
:
{
key
:
"403"
;
value
:
{
description
:
"Token Expired."
}
}
responses
:
{
key
:
"404"
;
value
:
{
description
:
"Returned when the resource does not exist."
}
}
}
;


enum SortOrderEnums {
    ASC = 0;
    DESC = 1;
}


message FilterValue {
    string key = 1;
    repeated string values = 2;
}

message SortOrder {
    string attribute = 1;
    SortOrderEnums order = 2;
}

message Process {
    string procID = 1;
    int64 lastSeen = 2;
    int64 firstSeen = 3;
    string namespace = 4;
    string applicationName = 5;

}

message ProcessesResponse {
    repeated Process processes = 1;
}

message ProcessesRequest {
    string namespace = 1;
    string applicationName = 2;
    uint64 page = 3;
    uint64 size = 4;
    string destination = 5;
}


message ProcessesQueryRequest {
    string namespace = 1;
    string applicationName = 2;
    uint64 page = 3;
    uint64 size = 4;
    SortOrder sort = 5;
    string search = 6;
    uint64 timestampStart = 7;
    uint64 timestampEnd = 8;
    repeated FilterValue filters = 9;
}



message ProcessQueryResponse {
    uint64 offset = 1;
    uint64 count = 2;
    uint64 total_count = 3;
    repeated Process processes = 4;
}

service ProcessDetailsService {
    rpc GetProcesses (ProcessesRequest) returns (ProcessesResponse) {
        option (google.api.http) = {
            get : "/v1/processes",
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description : "List processes"
            tags : "processes"
        };
    };

    rpc GetProcessQuery(ProcessesQueryRequest) returns (ProcessQueryResponse) {
        option (google.api.http) = {
            post: "/v1/processes/query"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description : "Query processes"
            tags : "processes"
        };
    };
}
